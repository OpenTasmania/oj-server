import{s as I,r,i as d}from"./vendor-kN0nZHKs.js";const O=I("build",()=>{const a=r([]),i=r(null),n=r(!1),c=r(0),o=r([]),p=r(null),m=d(()=>a.value.filter(e=>e.status==="building"||e.status==="queued")),v=d(()=>a.value.filter(e=>e.status==="completed")),b=d(()=>a.value.filter(e=>e.status==="failed")),f=d(()=>a.value.sort((e,t)=>new Date(t.startedAt)-new Date(e.startedAt)).slice(0,10)),w=d(()=>m.value.length>0),y=async e=>{n.value=!0,p.value=null,c.value=0,o.value=[];try{console.log("Starting build with config:",e);const s={id:Date.now().toString(),type:e.build_type,architecture:e.architecture||"amd64",rpiModel:e.rpi_model||null,status:"building",progress:0,startedAt:new Date().toISOString(),config:{...e},artifacts:[]};a.value.push(s),i.value=s;const u=[{progress:10,message:"Initializing build environment..."},{progress:20,message:"Downloading base images..."},{progress:35,message:"Installing dependencies..."},{progress:50,message:"Compiling source code..."},{progress:65,message:"Creating package structure..."},{progress:80,message:"Generating installer files..."},{progress:95,message:"Finalizing build artifacts..."},{progress:100,message:"Build completed successfully!"}];for(const g of u)await new Promise($=>setTimeout($,300)),c.value=g.progress,s.progress=g.progress,l(g.message);return s.artifacts=S(e),s.status="completed",s.completedAt=new Date().toISOString(),s}catch(t){throw console.error("Build failed:",t),p.value=t.message,i.value&&(i.value.status="failed",i.value.error=t.message),l(`Build failed: ${t.message}`),t}finally{n.value=!1}},S=e=>{const t=[],s=new Date().toISOString().replace(/[:.]/g,"-");switch(e.build_type){case"deb":t.push({name:`openjourney-server_1.0.0_${e.architecture}.deb`,type:"debian-package",size:"45.2 MB",path:`/builds/deb/openjourney-server_1.0.0_${e.architecture}.deb`});break;case"amd64":t.push({name:`openjourney-installer-amd64-${s}.iso`,type:"iso-image",size:"1.2 GB",path:`/builds/iso/openjourney-installer-amd64-${s}.iso`});break;case"rpi64":t.push({name:`openjourney-installer-rpi${e.rpi_model}-${s}.img`,type:"disk-image",size:"890 MB",path:`/builds/rpi/openjourney-installer-rpi${e.rpi_model}-${s}.img`});break}return t},B=async e=>a.value.find(s=>s.id===e)||null,h=async e=>{var s;const t=a.value.find(u=>u.id===e);t&&t.status==="building"&&(t.status="cancelled",t.cancelledAt=new Date().toISOString(),l("Build cancelled by user")),((s=i.value)==null?void 0:s.id)===e&&(n.value=!1)},D=async(e,t)=>{console.log(`Downloading artifact: ${t} from build: ${e}`),l(`Starting download of ${t}`),await new Promise(s=>setTimeout(s,1e3)),l(`Download of ${t} completed`)},_=e=>{var s;const t=a.value.findIndex(u=>u.id===e);t>-1&&a.value.splice(t,1),((s=i.value)==null?void 0:s.id)===e&&(i.value=null)},l=(e,t="info")=>{o.value.push({id:Date.now(),timestamp:new Date().toISOString(),message:e,level:t})};return{builds:a,currentBuild:i,isBuilding:n,buildProgress:c,buildLogs:o,buildError:p,activeBuilds:m,completedBuilds:v,failedBuilds:b,recentBuilds:f,hasActiveBuilds:w,build:y,getBuildStatus:B,cancelBuild:h,downloadArtifact:D,deleteBuild:_,addLog:l,clearLogs:()=>{o.value=[]},setCurrentBuild:e=>{i.value=e},resetBuildState:()=>{i.value=null,n.value=!1,c.value=0,o.value=[],p.value=null},initializeMockData:()=>{a.value=[{id:"1",type:"deb",architecture:"amd64",rpiModel:null,status:"completed",progress:100,startedAt:new Date(Date.now()-60*60*1e3).toISOString(),completedAt:new Date(Date.now()-55*60*1e3).toISOString(),config:{build_type:"deb",architecture:"amd64"},artifacts:[{name:"openjourney-server_1.0.0_amd64.deb",type:"debian-package",size:"45.2 MB",path:"/builds/deb/openjourney-server_1.0.0_amd64.deb"}]},{id:"2",type:"rpi64",architecture:"arm64",rpiModel:"4",status:"failed",progress:65,startedAt:new Date(Date.now()-30*60*1e3).toISOString(),error:"Insufficient disk space",config:{build_type:"rpi64",rpi_model:"4"},artifacts:[]}]}}});export{O as u};
