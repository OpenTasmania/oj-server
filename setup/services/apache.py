# setup/services/apache.py
"""
Handles setup of Apache webserver with mod_tile for raster tiles.
"""
import logging
import os
from typing import Optional

from setup import config
from setup.command_utils import (
    run_elevated_command,
    log_map_server,
    command_exists,
)
from ..helpers import backup_file, systemd_reload

module_logger = logging.getLogger(__name__)


def apache_modtile_setup(
    current_logger: Optional[logging.Logger] = None,
) -> None:
    logger_to_use = current_logger if current_logger else module_logger
    log_map_server(
        f"{config.SYMBOLS['step']} Setting up Apache with mod_tile...",
        "info",
        logger_to_use,
    )

    if not command_exists(
        "apache2ctl"
    ):  # Check for apache2ctl as a proxy for apache2 installation
        log_map_server(
            f"{config.SYMBOLS['warning']} Apache2 (apache2ctl) not found. Skipping Apache/mod_tile setup.",
            "warning",
            logger_to_use,
        )
        return

    ports_conf_path = "/etc/apache2/ports.conf"
    if backup_file(ports_conf_path, current_logger=logger_to_use):
        # This sed command replaces "Listen 80" with "Listen 8080".
        # It should be fairly safe. Add more specific matching if needed.
        run_elevated_command(
            [
                "sed",
                "-i.bak_ports",
                "s/^Listen 80$/Listen 8080/",
                ports_conf_path,
            ],
            current_logger=logger_to_use,
        )
        # Also check for IPv6 Listen [::]:80
        run_elevated_command(
            [
                "sed",
                "-i",
                "s/^Listen \\[::\\]:80$/Listen [::]:8080/",
                ports_conf_path,
            ],
            current_logger=logger_to_use,
            check=False,
        )  # Allow to fail if not present
        log_map_server(
            f"{config.SYMBOLS['success']} Apache configured to listen on port 8080 (was 80).",
            "success",
            logger_to_use,
        )

    mod_tile_conf_available_path = "/etc/apache2/conf-available/mod_tile.conf"
    mod_tile_conf_content = f"""# mod_tile.conf - Generated by script V{config.SCRIPT_HASH}
LoadModule tile_module /usr/lib/apache2/modules/mod_tile.so
ModTileRenderdSocketName /var/run/renderd/renderd.sock
ModTileEnableStats On
ModTileStatsFile /var/log/apache2/mod_tile_stats.txt
ModTileBulkMode Off
ModTileRequestTimeout 5
ModTileMissingRequestTimeout 30
ModTileMaxLoadOld 2
ModTileMaxLoadMissing 5

<IfModule mod_expires.c>
    ExpiresActive On
    ExpiresByType image/png "access plus 1 month"
</IfModule>
<IfModule mod_headers.c>
    Header set Cache-Control "max-age=2592000, public"
</IfModule>
"""
    run_elevated_command(
        ["tee", mod_tile_conf_available_path],
        cmd_input=mod_tile_conf_content,
        current_logger=logger_to_use,
    )
    log_map_server(
        f"{config.SYMBOLS['success']} Created {mod_tile_conf_available_path}",
        "success",
        logger_to_use,
    )

    apache_tiles_site_conf_available_path = (
        "/etc/apache2/sites-available/001-tiles.conf"
    )
    # URI in AddTileConfig (/hot/) must match the URI set in renderd.conf for the [default] style
    apache_tiles_site_content = f"""<VirtualHost *:8080>
    ServerName {config.VM_IP_OR_DOMAIN if config.VM_IP_OR_DOMAIN != config.VM_IP_OR_DOMAIN_DEFAULT else "tiles.localhost"}
    ServerAdmin webmaster@{config.VM_IP_OR_DOMAIN if config.VM_IP_OR_DOMAIN != config.VM_IP_OR_DOMAIN_DEFAULT else "localhost"}

    # mod_tile should be enabled via a2enmod tile, no need for LoadModule here if that's done.
    # However, explicit LoadModule can be a safeguard if a2enmod was missed or failed.
    # LoadModule tile_module /usr/lib/apache2/modules/mod_tile.so

    # The /hot/ part should match the URI in renderd.conf ([default] URI=/hot/)
    # The tile.openstreetmap.org is a placeholder and not strictly used by renderd locally for path generation.
    AddTileConfig /hot/ tile.openstreetmap.org

    ErrorLog ${{APACHE_LOG_DIR}}/tiles_error.log
    CustomLog ${{APACHE_LOG_DIR}}/tiles_access.log combined
</VirtualHost>
"""
    run_elevated_command(
        ["tee", apache_tiles_site_conf_available_path],
        cmd_input=apache_tiles_site_content,
        current_logger=logger_to_use,
    )
    log_map_server(
        f"{config.SYMBOLS['success']} Created {apache_tiles_site_conf_available_path}",
        "success",
        logger_to_use,
    )

    apache_modules_to_enable = ["tile", "expires", "headers"]
    for mod in apache_modules_to_enable:
        log_map_server(
            f"{config.SYMBOLS['gear']} Enabling Apache module: {mod}...",
            "info",
            logger_to_use,
        )
        run_elevated_command(["a2enmod", mod], current_logger=logger_to_use)

    log_map_server(
        f"{config.SYMBOLS['gear']} Enabling Apache site: {os.path.basename(apache_tiles_site_conf_available_path)}...",
        "info",
        logger_to_use,
    )
    run_elevated_command(
        ["a2ensite", os.path.basename(apache_tiles_site_conf_available_path)],
        current_logger=logger_to_use,
    )

    default_site_name = "000-default.conf"
    default_site_enabled_path = (
        f"/etc/apache2/sites-enabled/{default_site_name}"
    )
    # Check if the default site is enabled (is a symlink)
    is_link_check = run_elevated_command(
        ["test", "-L", default_site_enabled_path],
        check=False,
        capture_output=True,
        current_logger=logger_to_use,
    )
    if is_link_check.returncode == 0:
        log_map_server(
            f"{config.SYMBOLS['info']} Disabling default Apache site ({default_site_name})...",
            "info",
            logger_to_use,
        )
        run_elevated_command(
            ["a2dissite", default_site_name.replace(".conf", "")],
            current_logger=logger_to_use,
        )  # a2dissite usually takes name without .conf

    systemd_reload(current_logger=logger_to_use)
    log_map_server(
        f"{config.SYMBOLS['gear']} Restarting and enabling Apache service...",
        "info",
        logger_to_use,
    )
    run_elevated_command(
        ["systemctl", "restart", "apache2.service"],
        current_logger=logger_to_use,
    )
    run_elevated_command(
        ["systemctl", "enable", "apache2.service"],
        current_logger=logger_to_use,
    )
    log_map_server(
        f"{config.SYMBOLS['info']} Apache service status:",
        "info",
        logger_to_use,
    )
    run_elevated_command(
        ["systemctl", "status", "apache2.service", "--no-pager", "-l"],
        current_logger=logger_to_use,
    )
    log_map_server(
        f"{config.SYMBOLS['success']} Apache with mod_tile setup completed.",
        "success",
        logger_to_use,
    )
