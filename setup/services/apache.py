# setup/services/apache.py
# -*- coding: utf-8 -*-
"""
Handles the setup and configuration of the Apache webserver with mod_tile.

This module configures Apache to serve raster tiles generated by Renderd.
It involves changing Apache's listening port (if Nginx is the primary
webserver), creating configuration files for mod_tile and the tile-serving
virtual host, enabling necessary Apache modules, and managing Apache sites.
"""

import logging
import os
from typing import Optional

from setup import config
from setup.command_utils import (
    run_elevated_command,
    log_map_server,
    command_exists,
)
from setup.helpers import backup_file, systemd_reload
from setup.state_manager import get_current_script_hash

module_logger = logging.getLogger(__name__)


def apache_modtile_setup(
    current_logger: Optional[logging.Logger] = None,
) -> None:
    """
    Set up Apache webserver with mod_tile for serving raster tiles.

    - Checks if Apache is installed.
    - Changes Apache's default listening port from 80 to 8080 (to avoid
      conflict with Nginx if Nginx is on port 80).
    - Creates `mod_tile.conf` to load and configure mod_tile.
    - Creates an Apache site configuration (`001-tiles.conf`) for serving
      tiles from Renderd via mod_tile.
    - Enables required Apache modules: `tile`, `expires`, `headers`.
    - Enables the new tile-serving site and disables the default Apache site.
    - Restarts and enables the Apache service.

    Args:
        current_logger: Optional logger instance to use. If None,
                        the module's default logger is used.

    Raises:
        Exception: If critical steps like writing configuration files or
                   managing Apache services fail.
    """
    logger_to_use = current_logger if current_logger else module_logger
    log_map_server(
        f"{config.SYMBOLS['step']} Setting up Apache with mod_tile...",
        "info",
        logger_to_use,
    )
    script_hash_for_comments = (
        get_current_script_hash(logger_instance=logger_to_use) or "UNKNOWN_HASH"
    )

    # Check for apache2ctl as a proxy for Apache2 installation.
    if not command_exists("apache2ctl"):
        log_map_server(
            f"{config.SYMBOLS['warning']} Apache2 (apache2ctl) not found. "
            "Skipping Apache/mod_tile setup.",
            "warning",
            logger_to_use,
        )
        return

    # Modify Apache's listening port (typically to avoid conflict with Nginx).
    ports_conf_path = "/etc/apache2/ports.conf"
    if backup_file(ports_conf_path, current_logger=logger_to_use):
        # This sed command replaces "Listen 80" with "Listen 8080".
        run_elevated_command(
            [
                "sed", "-i.bak_ports_sed", # Create another backup before sed
                "s/^Listen 80$/Listen 8080/",
                ports_conf_path,
            ],
            current_logger=logger_to_use,
        )
        # Also check for IPv6 Listen [::]:80 and change to [::]:8080.
        run_elevated_command(
            [
                "sed", "-i", # In-place edit, previous backup already made
                "s/^Listen \\[::\\]:80$/Listen [::]:8080/",
                ports_conf_path,
            ],
            current_logger=logger_to_use,
            check=False,  # Allow to fail if IPv6 listen directive is not present.
        )
        log_map_server(
            f"{config.SYMBOLS['success']} Apache configured to listen on "
            "port 8080 (was 80). Original backed up.",
            "success",
            logger_to_use,
        )

    # Create mod_tile configuration file.
    mod_tile_conf_available_path = "/etc/apache2/conf-available/mod_tile.conf"
    mod_tile_conf_content = f"""\
# {mod_tile_conf_available_path} - Generated by script V{script_hash_for_comments}
# Loads and configures the mod_tile module for serving raster tiles from Renderd.

LoadModule tile_module /usr/lib/apache2/modules/mod_tile.so

# Path to the Renderd socket file.
ModTileRenderdSocketName /var/run/renderd/renderd.sock

# Enable statistics for mod_tile (optional).
ModTileEnableStats On
ModTileStatsFile /var/log/apache2/mod_tile_stats.txt

# Configuration for tile rendering load management.
ModTileBulkMode Off
ModTileRequestTimeout 5
ModTileMissingRequestTimeout 30
ModTileMaxLoadOld 2
ModTileMaxLoadMissing 5

# Configure browser caching for PNG tiles.
<IfModule mod_expires.c>
    ExpiresActive On
    ExpiresByType image/png "access plus 1 month"
</IfModule>
<IfModule mod_headers.c>
    Header set Cache-Control "max-age=2592000, public"
</IfModule>
"""
    run_elevated_command(
        ["tee", mod_tile_conf_available_path], # Overwrites or creates
        cmd_input=mod_tile_conf_content,
        current_logger=logger_to_use,
    )
    log_map_server(
        f"{config.SYMBOLS['success']} Created/Updated "
        f"{mod_tile_conf_available_path}",
        "success",
        logger_to_use,
    )

    # Create Apache site configuration for serving tiles.
    apache_tiles_site_conf_available_path = (
        "/etc/apache2/sites-available/001-tiles.conf"
    )
    # The URI in AddTileConfig (e.g., /hot/) must match the URI set in
    # renderd.conf for the corresponding style (e.g., [default] URI=/hot/).
    server_name_for_site = (
        config.VM_IP_OR_DOMAIN
        if config.VM_IP_OR_DOMAIN != config.VM_IP_OR_DOMAIN_DEFAULT
        else "tiles.localhost" # Fallback for local/default setup
    )
    admin_email_for_site = (
        f"webmaster@{config.VM_IP_OR_DOMAIN}"
        if config.VM_IP_OR_DOMAIN != config.VM_IP_OR_DOMAIN_DEFAULT
        else "webmaster@localhost"
    )

    apache_tiles_site_content = f"""\
# {apache_tiles_site_conf_available_path} - Generated by script V{script_hash_for_comments}
# Virtual host for serving map tiles via mod_tile.

<VirtualHost *:8080>
    ServerName {server_name_for_site}
    ServerAdmin {admin_email_for_site}

    # mod_tile should be enabled via a2enconf mod_tile or a2enmod tile.
    # This AddTileConfig directive tells mod_tile about the tile source.
    # The URI /hot/ should match the URI in renderd.conf (e.g., [default] URI=/hot/).
    # The 'tile.openstreetmap.org' is a traditional placeholder and not
    # strictly used by renderd locally for path generation if XML defines paths.
    AddTileConfig /hot/ tile.openstreetmap.org

    ErrorLog $${{APACHE_LOG_DIR}}/tiles_error.log
    CustomLog ${{APACHE_LOG_DIR}}/tiles_access.log combined
</VirtualHost>
"""
    run_elevated_command(
        ["tee", apache_tiles_site_conf_available_path], # Overwrites or creates
        cmd_input=apache_tiles_site_content,
        current_logger=logger_to_use,
    )
    log_map_server(
        f"{config.SYMBOLS['success']} Created/Updated "
        f"{apache_tiles_site_conf_available_path}",
        "success",
        logger_to_use,
    )

    # Enable necessary Apache modules and the new configuration/site.
    apache_configs_to_enable = ["mod_tile.conf"] # As a conf, not a mod
    for conf_name in apache_configs_to_enable:
        log_map_server(
            f"{config.SYMBOLS['gear']} Enabling Apache configuration: {conf_name}...",
            "info",
            logger_to_use,
        )
        run_elevated_command(["a2enconf", conf_name.replace(".conf", "")],
                             current_logger=logger_to_use)


    apache_modules_to_enable = ["expires", "headers"] # mod_tile is loaded by its conf
    for mod in apache_modules_to_enable:
        log_map_server(
            f"{config.SYMBOLS['gear']} Enabling Apache module: {mod}...",
            "info",
            logger_to_use,
        )
        run_elevated_command(["a2enmod", mod], current_logger=logger_to_use)

    log_map_server(
        f"{config.SYMBOLS['gear']} Enabling Apache site: "
        f"{os.path.basename(apache_tiles_site_conf_available_path)}...",
        "info",
        logger_to_use,
    )
    run_elevated_command(
        ["a2ensite", os.path.basename(apache_tiles_site_conf_available_path).replace(".conf", "")],
        current_logger=logger_to_use,
    )

    # Disable the default Apache site if it's enabled.
    default_site_name = "000-default.conf"
    default_site_enabled_path = (
        f"/etc/apache2/sites-enabled/{default_site_name}"
    )
    # Check if the default site is enabled (is a symlink).
    is_link_check = run_elevated_command(
        ["test", "-L", default_site_enabled_path],
        check=False, capture_output=True, current_logger=logger_to_use,
    )
    if is_link_check.returncode == 0: # Symlink exists, so site is enabled.
        log_map_server(
            f"{config.SYMBOLS['info']} Disabling default Apache site "
            f"({default_site_name})...",
            "info",
            logger_to_use,
        )
        run_elevated_command(
            ["a2dissite", default_site_name.replace(".conf", "")],
            current_logger=logger_to_use,
        )

    # Reload systemd and restart Apache.
    systemd_reload(current_logger=logger_to_use)
    log_map_server(
        f"{config.SYMBOLS['gear']} Restarting and enabling Apache service...",
        "info",
        logger_to_use,
    )
    run_elevated_command(
        ["systemctl", "restart", "apache2.service"],
        current_logger=logger_to_use,
    )
    run_elevated_command(
        ["systemctl", "enable", "apache2.service"],
        current_logger=logger_to_use,
    )
    log_map_server(
        f"{config.SYMBOLS['info']} Apache service status:",
        "info",
        logger_to_use,
    )
    run_elevated_command(
        ["systemctl", "status", "apache2.service", "--no-pager", "-l"],
        current_logger=logger_to_use,
    )
    log_map_server(
        f"{config.SYMBOLS['success']} Apache with mod_tile setup completed.",
        "success",
        logger_to_use,
    )