# setup/config_models.py
# -*- coding: utf-8 -*-
"""
Pydantic models for application configuration.

This module defines the structured settings for the application,
including defaults, type annotations, and descriptions.
It utilizes Pydantic for data validation and settings management.
"""

from pathlib import Path
from typing import Dict, Optional, Union

from pydantic import (
    Field,
    HttpUrl,
)
from pydantic_settings import BaseSettings, SettingsConfigDict

# --- Default Static Values ---
ADMIN_GROUP_IP_DEFAULT: str = "192.168.128.0/22"
GTFS_FEED_URL_DEFAULT: str = (
    "https://www.transport.act.gov.au/googletransit/google_transit.zip"
)
VM_IP_OR_DOMAIN_DEFAULT: str = "example.com"
PG_TILESERV_BINARY_LOCATION_DEFAULT: str = (
    "https://postgisftw.s3.amazonaws.com/pg_tileserv_latest_linux.zip"
)
LOG_PREFIX_DEFAULT: str = "[MAP-SETUP]"

PGHOST_DEFAULT: str = "127.0.0.1"
PGPORT_DEFAULT: int = 5432
PGDATABASE_DEFAULT: str = "gis"
PGUSER_DEFAULT: str = "osmuser"
PGPASSWORD_DEFAULT: str = "yourStrongPasswordHere"

CONTAINER_RUNTIME_COMMAND_DEFAULT: str = "docker"
OSRM_IMAGE_TAG_DEFAULT: str = "osrm/osrm-backend:latest"
# OSRM Specific Defaults
OSRM_DATA_BASE_DIR_DEFAULT: str = "/opt/osm_data"
OSRM_PROCESSED_DIR_DEFAULT: str = "/opt/osrm_processed_data"
OSRM_BASE_PBF_URL_DEFAULT: str = (
    "https://download.geofabrik.de/australia-oceania/australia-latest.osm.pbf"
)
OSRM_BASE_PBF_FILENAME_DEFAULT: str = "australia-latest.osm.pbf"
OSRM_CAR_PROFILE_PORT_DEFAULT: int = 5000
OSRM_MAX_TABLE_SIZE_ROUTED_DEFAULT: int = 8000
OSRM_PROFILE_LUA_IN_CONTAINER_DEFAULT: str = (
    "/opt/car.lua"  # Default car profile in OSRM container
)
APACHE_LISTEN_PORT_DEFAULT: int = 8080
POSTGRES_VERSION_DEFAULT: str = "17"

# --- Default Preseed Values ---
DEFAULT_PACKAGE_PRESEEDING_VALUES: Dict[str, Dict[str, str]] = {
    "tzdata": {
        "tzdata/Areas": "select Australia",
        "tzdata/Zones/Australia": "select Hobart",  # Default for Tasmania focus
    },
    "unattended-upgrades": {
        "unattended-upgrades/enable_auto_updates": "true boolean",
        # Add other unattended-upgrades preseed keys if needed
        # e.g., "unattended-upgrades/origins_pattern": "string o=Debian,n=${distro_codename},l=Debian-Security; o=Debian,n=${distro_codename}-updates;",
    },
    # Add other packages and their preseed data here
    # "some-other-package": {
    #     "package/question1": "type value1",
    #     "package/question2": "type value2",
    # }
}

# --- Default Templates for Configuration Files ---
PG_HBA_TEMPLATE_DEFAULT: str = """\
# pg_hba.conf configured by script V{script_hash}
# TYPE  DATABASE        USER            ADDRESS                 METHOD
local   all             postgres                                peer
local   all             all                                     peer
local   {pg_database}    {pg_user}                                scram-sha-256
host    all             all             127.0.0.1/32            scram-sha-256
host    {pg_database}    {pg_user}        127.0.0.1/32            scram-sha-256
host    {pg_database}    {pg_user}        {admin_group_ip}       scram-sha-256
host    all             all             ::1/128                 scram-sha-256
host    {pg_database}    {pg_user}        ::1/128                 scram-sha-256
"""

POSTGRESQL_CONF_ADDITIONS_TEMPLATE_DEFAULT: str = """\
# --- TRANSIT SERVER CUSTOMISATIONS - Appended by script V{script_hash} ---
listen_addresses = '*'
shared_buffers = 2GB
work_mem = 256MB
maintenance_work_mem = 2GB
checkpoint_timeout = 15min
max_wal_size = 4GB
min_wal_size = 2GB
checkpoint_completion_target = 0.9
effective_cache_size = 6GB
logging_collector = on
log_directory = 'log'
log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
log_min_duration_statement = 250ms
# --- END TRANSIT SERVER CUSTOMISATIONS ---
"""

APACHE_MOD_TILE_CONF_TEMPLATE_DEFAULT: str = """\
# mod_tile.conf - Generated by script V{script_hash}
LoadModule tile_module /usr/lib/apache2/modules/mod_tile.so

ModTileRenderdSocketName {renderd_socket_path}
ModTileEnableStats On
ModTileBulkMode Off
ModTileRequestTimeout {mod_tile_request_timeout}
ModTileMissingRequestTimeout {mod_tile_missing_request_timeout}
ModTileMaxLoadOld {mod_tile_max_load_old}
ModTileMaxLoadMissing {mod_tile_max_load_missing}

<IfModule mod_expires.c>
    ExpiresActive On
    ExpiresByType image/png "access plus 1 month"
</IfModule>
<IfModule mod_headers.c>
    Header set Cache-Control "max-age=2592000, public"
</IfModule>
"""

APACHE_TILE_SITE_TEMPLATE_DEFAULT: str = """\
# Apache tile serving site - Generated by script V{script_hash}
<VirtualHost *:{apache_listen_port}>
    ServerName {server_name_apache}
    ServerAdmin {admin_email_apache}

    AddTileConfig /{renderd_uri_path_segment}/ tile.openstreetmap.org

    ErrorLog ${{APACHE_LOG_DIR}}/tiles_error.log
    CustomLog ${{APACHE_LOG_DIR}}/tiles_access.log combined
</VirtualHost>
"""

NGINX_PROXY_SITE_TEMPLATE_DEFAULT: str = """\
# Nginx reverse proxy site - Generated by script V{script_hash}
# For server: {server_name_nginx}

server {{
    listen 80 default_server;
    listen [::]:80 default_server;

    # SSL settings below are typically managed by Certbot if you run it.
    # listen 443 ssl http2 default_server;
    # listen [::]:443 ssl http2 default_server;
    # ssl_certificate /etc/letsencrypt/live/{server_name_nginx}/fullchain.pem;
    # ssl_certificate_key /etc/letsencrypt/live/{server_name_nginx}/privkey.pem;
    # include /etc/letsencrypt/options-ssl-nginx.conf;
    # ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    server_name {server_name_nginx};

    access_log /var/log/nginx/{proxy_conf_filename_base}.access.log;
    error_log /var/log/nginx/{proxy_conf_filename_base}.error.log;

    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_buffering off;

    location {pg_tileserv_uri_prefix}/ {{ # Path prefix from PgTileservSettings
        proxy_pass http://localhost:{pg_tileserv_port}/;
    }}
    location /{renderd_uri_path_segment}/ {{ # Path prefix from RenderdSettings
        proxy_pass http://localhost:{apache_port}/{renderd_uri_path_segment}/;
    }}
    location /route/v1/ {{
        proxy_pass http://localhost:{osrm_port_car}/route/v1/;
    }}
    location / {{
        root {website_root_dir};
        index index.html index.htm;
        try_files $uri $uri/ /index.html =404;
    }}
}}
"""

RENDERD_CONF_TEMPLATE_DEFAULT: str = """\
# {renderd_conf_path} - Generated by script V{script_hash}
[renderd]
num_threads={num_threads_renderd}
tile_dir={renderd_tile_cache_dir}
stats_file={renderd_run_dir}/renderd.stats
font_dir_recurse=1

[mapnik]
plugins_dir={mapnik_plugins_dir}
font_dir=/usr/share/fonts/ # Standard font directory
font_dir_recurse=1

[default]
URI=/{renderd_uri_path_segment}/
XML={mapnik_xml_stylesheet_path}
HOST={renderd_host}
TILESIZE=256
# MAXZOOM=20 ; Usually defined in the style XML, can be added here if needed
"""

# Default paths and values for Renderd
RENDERD_TILE_CACHE_DIR_DEFAULT = "/var/lib/mod_tile"
RENDERD_RUN_DIR_DEFAULT = "/var/run/renderd"
RENDERD_SOCKET_PATH_DEFAULT = "/var/run/renderd/renderd.sock"
MAPNIK_XML_STYLESHEET_PATH_DEFAULT = "/usr/local/share/maps/style/openstreetmap-carto/mapnik.xml"  # Standard deployment path for our style
RENDERD_URI_PATH_SEGMENT_DEFAULT = "hot"

PG_TILESERV_CONFIG_TEMPLATE_DEFAULT: str = """\
# pg_tileserv config generated by script V{script_hash}
HttpHost = "{pg_tileserv_http_host}"
HttpPort = {pg_tileserv_http_port}
DatabaseURL = "{db_url_for_pg_tileserv}" # Formatted in Python
DefaultMaxFeatures = {pg_tileserv_default_max_features}
PublishSchemas = "{pg_tileserv_publish_schemas}"
URIPrefix = "{pg_tileserv_uri_prefix}"
DevelopmentMode = {pg_tileserv_development_mode_bool}
AllowFunctionSources = {pg_tileserv_allow_function_sources_bool}
# Further customization can be done by editing this template in config.yaml
"""

PG_TILESERV_SYSTEMD_TEMPLATE_DEFAULT: str = """\
[Unit]
Description=pg_tileserv - Vector Tile Server for PostGIS
Documentation=https://github.com/CrunchyData/pg_tileserv
Wants=network-online.target postgresql.service
After=network-online.target postgresql.service

[Service]
User={pg_tileserv_system_user}
Group={pg_tileserv_system_group}
# pg_tileserv reads DB connection from its config file.
ExecStart={pg_tileserv_binary_path} --config {pg_tileserv_config_file_path_systemd}
Restart=on-failure
RestartSec=5s
StandardOutput=journal
StandardError=journal
SyslogIdentifier=pg_tileserv
# Consider security hardening options if needed

[Install]
WantedBy=multi-user.target
# File created by script V{script_hash}
"""

PG_TILESERV_SYSTEM_USER_DEFAULT = "pgtileserv_user"
PG_TILESERV_BINARY_PATH_DEFAULT = "/usr/local/bin/pg_tileserv"
PG_TILESERV_CONFIG_DIR_DEFAULT = "/etc/pg_tileserv"
PG_TILESERV_CONFIG_FILENAME_DEFAULT = "config.toml"

OSRM_SYSTEMD_TEMPLATE_DEFAULT: str = """\
[Unit]
Description=OSRM Routed service for region: {region_name}
After=docker.service network-online.target # Or general container runtime service
Wants=docker.service

[Service]
Restart=always
RestartSec=5
ExecStartPre=-/usr/bin/{container_runtime_command} stop osrm-routed-{region_name}
ExecStartPre=-/usr/bin/{container_runtime_command} rm osrm-routed-{region_name}
ExecStart=/usr/bin/{container_runtime_command} run --rm --name osrm-routed-{region_name} \\
    -p 127.0.0.1:{host_port_for_region}:{container_osrm_port} \\
    -v "{host_osrm_data_dir_for_region}":"/data_processing":ro \\
    {osrm_image_tag} osrm-routed "/data_processing/{osrm_filename_in_container}" --max-table-size {max_table_size_routed} {extra_osrm_routed_args}

ExecStop=/usr/bin/{container_runtime_command} stop osrm-routed-{region_name}

[Install]
WantedBy=multi-user.target
# File created by script V{script_hash} for region {region_name}
"""

WEBAPP_INDEX_HTML_TEMPLATE_DEFAULT: str = """\
<!DOCTYPE html>
<html lang="en">
<head>
    <title>Transit System Map Test - V{script_version_short}</title>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="{scheme}://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin=""/>
    <script src="{scheme}://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
    <link href='{scheme}://unpkg.com/maplibre-gl@4.1.0/dist/maplibre-gl.css' rel='stylesheet' />
    <script src='{scheme}://unpkg.com/maplibre-gl@4.1.0/dist/maplibre-gl.js'></script>
    <style>
        body {{ margin: 0; padding: 0; font-family: sans-serif; }}
        #map-container {{ display: flex; flex-direction: column; height: 100vh; }}
        .map-area {{ flex: 1; border: 1px solid #ccc; margin-bottom: 10px; min-height: 40vh; }}
        .info {{ padding: 10px; background: #f4f4f4; border-bottom: 1px solid #ddd; margin-bottom:10px; }}
        h2, h3 {{ margin-top: 0; }}
        @media (min-width: 768px) {{
            #map-container {{ flex-direction: row; }}
            .map-area {{ flex: 1; min-height: initial; height: auto; }}
            .map-area:first-of-type {{ margin-right: 5px; margin-bottom: 0; }}
            .map-area:last-of-type {{ margin-left: 5px; margin-bottom: 0; }}
        }}
    </style>
</head>
<body>

<div class="info">
    <h2>Map Test Page</h2>
    <p>Testing Raster Tiles (Leaflet) and Vector Tiles (MapLibre GL JS).</p>
    <p>Server Host: <strong>{vm_ip_or_domain}</strong> (Scheme: {scheme}://, Nginx Port: {nginx_port})</p>
    <p><i>Access URLs assume Nginx proxy is correctly configured. Map data is centered on Hobart, Tasmania.</i></p>
</div>

<div id="map-container">
    <div id="map-raster" class="map-area"><h3>Raster Tiles (Leaflet) - OSM Base</h3></div>
    <div id="map-vector" class="map-area"><h3>Vector Tiles (MapLibre GL JS) - GTFS Stops & Shapes</h3></div>
</div>

<script>
    // --- Raster Map (Leaflet) ---
    try {{
        var rasterMap = L.map('map-raster').setView([-42.8826, 147.3257], 13); // Hobart default
        L.tileLayer('{scheme}://{vm_ip_or_domain}:{nginx_port}/{renderd_uri_path_segment}/{{z}}/{{x}}/{{y}}.png', {{
            maxZoom: 19,
            attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, Tiles by Local Server'
        }}).addTo(rasterMap);
        L.marker([-42.8826, 147.3257]).addTo(rasterMap).bindPopup('Hobart (Raster View)');
    }} catch(e) {{ console.error("Leaflet map error: ", e); document.getElementById('map-raster').innerHTML = "Error initializing raster map: " + e.message; }}

    // --- Vector Map (MapLibre GL JS) ---
    try {{
        var vectorMap = new maplibregl.Map({{
            container: 'map-vector',
            style: {{
                'version': 8,
                'sources': {{
                    'pgtileserv_stops': {{
                        'type': 'vector',
                        'tiles': ['{scheme}://{vm_ip_or_domain}:{nginx_port}{pg_tileserv_uri_prefix}/public.gtfs_stops/{{z}}/{{x}}/{{y}}.pbf'],
                        'maxzoom': 16
                    }},
                    'pgtileserv_shapes': {{
                        'type': 'vector',
                        'tiles': ['{scheme}://{vm_ip_or_domain}:{nginx_port}{pg_tileserv_uri_prefix}/public.gtfs_shapes_lines/{{z}}/{{x}}/{{y}}.pbf'],
                        'maxzoom': 16
                    }}
                }},
                'layers': [
                    {{ 'id': 'background', 'type': 'background', 'paint': {{ 'background-color': '#f0f2f5' }} }},
                    {{
                        'id': 'routes-lines', 'type': 'line', 'source': 'pgtileserv_shapes',
                        'source-layer': 'public.gtfs_shapes_lines', // Make sure this matches your table name in DB
                        'layout': {{ 'line-join': 'round', 'line-cap': 'round' }},
                        'paint': {{ 'line-color': '#e3342f', 'line-width': 2.5, 'line-opacity': 0.8 }}
                    }},
                    {{
                        'id': 'stops-circles', 'type': 'circle', 'source': 'pgtileserv_stops',
                        'source-layer': 'public.gtfs_stops', // Make sure this matches your table name in DB
                        'paint': {{
                            'circle-radius': 4, 'circle-color': '#3490dc',
                            'circle-stroke-width': 1, 'circle-stroke-color': '#ffffff'
                        }}
                    }}
                ]
            }},
            center: [147.3257, -42.8826], // Hobart default (lng, lat)
            zoom: 12
        }});
        vectorMap.addControl(new maplibregl.NavigationControl());
    }} catch (e) {{
        console.error("MapLibre GL map error:", e);
        document.getElementById('map-vector').innerHTML = "Error initializing vector map: " + e.message;
    }}
</script>
</body>
</html>
"""
WEBAPP_ROOT_DIR_DEFAULT = "/var/www/html/map_test_page"
WEBAPP_INDEX_FILENAME_DEFAULT = "index.html"

SYMBOLS_DEFAULT: Dict[str, str] = {
    "success": "✅",
    "error": "❌",
    "warning": "⚠️",
    "info": "ℹ️",
    "step": "➡️",
    "gear": "⚙️",
    "package": "📦",
    "rocket": "🚀",
    "sparkles": "✨",
    "critical": "🔥",
    "debug": "🐛",
}


class PgTileservSettings(BaseSettings):
    """pg_tileserv specific settings."""

    model_config = SettingsConfigDict(env_prefix="PGTS_", extra="ignore")

    binary_url: Union[HttpUrl, str] = Field(
        default=PG_TILESERV_BINARY_LOCATION_DEFAULT,
        description="URL or local path for the pg_tileserv binary if not installed via apt.",
    )
    system_user: str = Field(
        default=PG_TILESERV_SYSTEM_USER_DEFAULT,
        description="System user to run pg_tileserv.",
    )
    binary_install_path: Path = Field(
        default=Path(PG_TILESERV_BINARY_PATH_DEFAULT),
        description="Install path for pg_tileserv binary.",
    )
    config_dir: Path = Field(
        default=Path(PG_TILESERV_CONFIG_DIR_DEFAULT),
        description="Directory for pg_tileserv config file.",
    )
    config_filename: str = Field(
        default=PG_TILESERV_CONFIG_FILENAME_DEFAULT,
        description="Filename for pg_tileserv config (e.g., config.toml).",
    )

    http_host: str = Field(
        default="0.0.0.0", description="Host pg_tileserv binds to."
    )
    http_port: int = Field(
        default=7800, description="Port pg_tileserv listens on."
    )
    default_max_features: int = Field(
        default=10000, description="DefaultMaxFeatures for pg_tileserv."
    )
    publish_schemas: str = Field(
        default="public,gtfs",
        description="Comma-separated list of schemas for pg_tileserv to publish.",
    )
    uri_prefix: str = Field(
        default="/vector",
        description="Base URI prefix for tile requests (used in Nginx proxy and pg_tileserv).",
    )
    development_mode: bool = Field(
        default=False, description="Enable DevelopmentMode in pg_tileserv."
    )
    allow_function_sources: bool = Field(
        default=True,
        description="Enable AllowFunctionSources in pg_tileserv.",
    )

    config_template: str = Field(
        default=PG_TILESERV_CONFIG_TEMPLATE_DEFAULT,
        description="Template for the pg_tileserv config.toml file.",
    )
    systemd_template: str = Field(
        default=PG_TILESERV_SYSTEMD_TEMPLATE_DEFAULT,
        description="Template for the pg_tileserv systemd service file.",
    )


class PostgresSettings(BaseSettings):
    model_config = SettingsConfigDict(env_prefix="PG_", extra="ignore")
    host: str = Field(default=PGHOST_DEFAULT)
    port: int = Field(default=PGPORT_DEFAULT)
    database: str = Field(default=PGDATABASE_DEFAULT)
    user: str = Field(default=PGUSER_DEFAULT)
    password: str = Field(default=PGPASSWORD_DEFAULT, exclude=True)
    version: str = Field(
        default=POSTGRES_VERSION_DEFAULT,
        description="Major PostgreSQL version for path construction.",
    )
    hba_template: str = Field(default=PG_HBA_TEMPLATE_DEFAULT)
    postgresql_conf_additions_template: str = Field(
        default=POSTGRESQL_CONF_ADDITIONS_TEMPLATE_DEFAULT
    )


class ApacheSettings(BaseSettings):
    model_config = SettingsConfigDict(env_prefix="APACHE_", extra="ignore")
    listen_port: int = Field(default=APACHE_LISTEN_PORT_DEFAULT)
    mod_tile_request_timeout: int = Field(default=5)
    mod_tile_missing_request_timeout: int = Field(default=30)
    mod_tile_max_load_old: int = Field(default=2)
    mod_tile_max_load_missing: int = Field(default=5)
    mod_tile_conf_template: str = Field(
        default=APACHE_MOD_TILE_CONF_TEMPLATE_DEFAULT
    )
    tile_site_template: str = Field(default=APACHE_TILE_SITE_TEMPLATE_DEFAULT)


class NginxSettings(BaseSettings):
    model_config = SettingsConfigDict(env_prefix="NGINX_", extra="ignore")
    proxy_site_template: str = Field(
        default=NGINX_PROXY_SITE_TEMPLATE_DEFAULT
    )
    proxy_conf_name_base: str = Field(
        default="transit_proxy",
        description="Base name for Nginx proxy conf file (without .conf).",
    )


class OsrmServiceSettings(BaseSettings):
    model_config = SettingsConfigDict(
        env_prefix="OSRM_SERVICE_", extra="ignore"
    )
    car_profile_default_host_port: int = Field(
        default=OSRM_CAR_PROFILE_PORT_DEFAULT,
        description="Default host port for OSRM car profile if not specified per region.",
    )
    container_osrm_port: int = Field(
        default=5000,
        description="Internal port OSRM listens on inside the container.",
    )
    image_tag: str = Field(
        default=OSRM_IMAGE_TAG_DEFAULT,
        description="Docker image for OSRM backend (e.g., osrm/osrm-backend:latest).",
    )
    extra_routed_args: str = Field(
        default="",
        description="Extra arguments for osrm-routed command, e.g. '--max-matching-size 1000'.",
    )
    systemd_template: str = Field(
        default=OSRM_SYSTEMD_TEMPLATE_DEFAULT,
        description="Template for OSRM systemd service files.",
    )
    region_port_map: Dict[str, int] = Field(
        default_factory=dict,
        description="Maps region keys to their assigned ports. If a region is not in this map, it will use an auto-assigned port.",
    )


class OsrmDataSettings(BaseSettings):
    model_config = SettingsConfigDict(env_prefix="OSRM_DATA_", extra="ignore")
    base_dir: Path = Field(
        default=Path(OSRM_DATA_BASE_DIR_DEFAULT),
        description="Base directory for OSM PBFs and region boundaries.",
    )
    processed_dir: Path = Field(
        default=Path(OSRM_PROCESSED_DIR_DEFAULT),
        description="Base directory for OSRM processed graph files.",
    )
    base_pbf_url: HttpUrl = Field(
        default=HttpUrl(OSRM_BASE_PBF_URL_DEFAULT),
        description="URL for the base OSM PBF file.",
    )
    base_pbf_filename: str = Field(
        default=OSRM_BASE_PBF_FILENAME_DEFAULT,
        description="Filename for the downloaded base PBF.",
    )
    profile_script_in_container: str = Field(
        default=OSRM_PROFILE_LUA_IN_CONTAINER_DEFAULT,
        description="Path to LUA profile script inside OSRM container (e.g. /opt/car.lua).",
    )
    max_table_size_routed: int = Field(
        default=OSRM_MAX_TABLE_SIZE_ROUTED_DEFAULT,
        description="--max-table-size parameter for osrm-routed instances (used in systemd template).",
    )
    # TODO: Remove this hardcode
    osm2pgsql_cache_mb: int = 20000


class RenderdSettings(BaseSettings):
    model_config = SettingsConfigDict(env_prefix="RENDERD_", extra="ignore")

    num_threads_multiplier: float = Field(
        default=2.0,
        description="Multiplier for CPU cores for renderd threads (0 means auto). If set to 0, num_threads_renderd will be calculated as (cpu_count * 2) or (1*2) if cpu_count is None.",
    )
    tile_cache_dir: Path = Field(default=Path(RENDERD_TILE_CACHE_DIR_DEFAULT))
    run_dir: Path = Field(default=Path(RENDERD_RUN_DIR_DEFAULT))
    socket_path: str = Field(
        default=RENDERD_SOCKET_PATH_DEFAULT,
        description="Path for renderd UNIX socket.",
    )

    mapnik_xml_stylesheet_path: Path = Field(
        default=Path(MAPNIK_XML_STYLESHEET_PATH_DEFAULT),
        description="Absolute path to the Mapnik XML stylesheet.",
    )
    mapnik_plugins_dir_override: Optional[Path] = Field(
        default=None,
        description="Override for Mapnik plugins directory. If None, auto-detected.",
    )

    uri_path_segment: str = Field(
        default=RENDERD_URI_PATH_SEGMENT_DEFAULT,
        description="URI path segment for renderd tiles (e.g., 'hot' for /hot/).",
    )
    renderd_conf_template: str = Field(default=RENDERD_CONF_TEMPLATE_DEFAULT)


class CertbotSettings(BaseSettings):
    model_config = SettingsConfigDict(env_prefix="CERTBOT_", extra="ignore")
    use_hsts: bool = Field(
        default=False,
        description="Enable HTTP Strict Transport Security (HSTS) via Certbot.",
    )
    use_staple_ocsp: bool = Field(
        default=False,
        description="Enable OCSP Stapling via Certbot for the Nginx configuration.",
    )
    use_uir: bool = Field(
        default=False,
        description="Advise Certbot to include the --uir flag for insecure redirects (less common).",
    )


class WebAppSettings(BaseSettings):
    model_config = SettingsConfigDict(env_prefix="WEBAPP_", extra="ignore")
    root_dir: Path = Field(
        default=Path(WEBAPP_ROOT_DIR_DEFAULT),
        description="Root directory for static website content served by Nginx.",
    )
    index_filename: str = Field(
        default=WEBAPP_INDEX_FILENAME_DEFAULT,
        description="Filename for the main HTML page.",
    )
    index_html_template: str = Field(
        default=WEBAPP_INDEX_HTML_TEMPLATE_DEFAULT,
        description="HTML template for the test/index page.",
    )
    default_scheme: str = Field(
        default="http",
        description="Default scheme (http or https) to use for constructing URLs in the test page. Certbot run may make https the norm.",
    )
    nginx_external_port: int = Field(
        default=80,
        description="External port Nginx is expected to listen on (for URL construction in HTML).",
    )


# New Model for Package Preseeding
class PackagePreseedingSettings(BaseSettings):
    """Holds preseed configurations for Debian packages.
    Maps package names to their debconf key-value pairs.
    Example: {"tzdata": {"tzdata/Areas": "select Australia"}}
    """

    model_config = SettingsConfigDict(
        extra="ignore"
    )  # Allows arbitrary package names as keys
    # TODO: Look at all this
    # This field will effectively be Dict[str, Dict[str, str]]
    # Pydantic handles this by allowing additional fields in the model if extra='allow'
    # or by dynamically creating fields if we were to define them explicitly.
    # For a truly dynamic Dict[str, Dict[str, str]] that still gets ENV var loading,
    # a custom root model or a more complex setup might be needed.
    # However, for loading from YAML, this structure is fine.
    # The default_factory ensures it initializes as an empty dict if not in YAML/ENV.
    # We will rely on the YAML loader to populate this correctly.
    # For default values, we'll use the constant defined at the top of the file.

    # This specific structure is a bit tricky for Pydantic's direct ENV mapping for nested dicts
    # like PACKAGE_PRESEEDING_VALUES_TZDATA_AREAS='select Australia'.
    # It's more straightforward if loaded from a YAML file or if individual packages
    # had their own sub-model, e.g., tzdata_preseed: Optional[Dict[str,str]] = Field(...)
    # For now, we'll initialize with a default dictionary.
    # The _deep_update in config_loader.py will handle merging from YAML.


class AppSettings(BaseSettings):
    model_config = SettingsConfigDict(extra="ignore", case_sensitive=False)

    admin_group_ip: str = Field(default=ADMIN_GROUP_IP_DEFAULT)
    gtfs_feed_url: Union[HttpUrl, str] = Field(default=GTFS_FEED_URL_DEFAULT)
    vm_ip_or_domain: str = Field(default=VM_IP_OR_DOMAIN_DEFAULT)
    pg_tileserv_binary_location: Union[HttpUrl, str] = Field(
        default=PG_TILESERV_BINARY_LOCATION_DEFAULT
    )
    log_prefix: str = Field(default=LOG_PREFIX_DEFAULT)
    dev_override_unsafe_password: bool = Field(
        default=False,
        description="Override safety checks for development environments",
    )

    container_runtime_command: str = Field(
        default=CONTAINER_RUNTIME_COMMAND_DEFAULT
    )
    osrm_image_tag: str = Field(default=OSRM_IMAGE_TAG_DEFAULT)

    pg: PostgresSettings = Field(default_factory=PostgresSettings)
    apache: ApacheSettings = Field(default_factory=ApacheSettings)
    nginx: NginxSettings = Field(default_factory=NginxSettings)
    pg_tileserv: PgTileservSettings = Field(
        default_factory=PgTileservSettings
    )
    osrm_service: OsrmServiceSettings = Field(
        default_factory=OsrmServiceSettings
    )
    osrm_data: OsrmDataSettings = Field(default_factory=OsrmDataSettings)
    renderd: RenderdSettings = Field(default_factory=RenderdSettings)
    certbot: CertbotSettings = Field(default_factory=CertbotSettings)
    webapp: WebAppSettings = Field(default_factory=WebAppSettings)

    # Centralized package preseeding configurations
    package_preseeding_values: Dict[str, Dict[str, str]] = Field(
        default_factory=lambda: DEFAULT_PACKAGE_PRESEEDING_VALUES.copy(),
        description="Debian package preseed configurations. Maps package names to debconf key-value pairs.",
    )

    symbols: Dict[str, str] = Field(
        default_factory=lambda: SYMBOLS_DEFAULT.copy()
    )
