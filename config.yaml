# config.yaml
# Default configuration settings for the OpenStreetMap Server Setup.
# Users can override these settings by editing this file.
# Environment variables and CLI arguments can also override these settings.

# General Application Settings
admin_group_ip: "192.168.128.0/22"
gtfs_feed_url: "https://www.transport.act.gov.au/googletransit/google_transit.zip"
vm_ip_or_domain: "example.com" # IMPORTANT: Change this to your server's actual FQDN or IP
pg_tileserv_binary_location: "https://postgisftw.s3.amazonaws.com/pg_tileserv_latest_linux.zip"
log_prefix: "[MAP-SETUP]" # Log prefix for the main installer script

# Developer Flags
dev_override_unsafe_password: false # Set to true only for development if using default DB password

# Containerization Settings
container_runtime_command: "docker" # e.g., "docker" or "podman"
osrm_image_tag: "osrm/osrm-backend:latest" # OSRM Docker image to use

# PostgreSQL Connection Settings
pg:
  host: "127.0.0.1"
  port: 5432
  database: "gis"
  user: "osmuser"
  # password: "yourStrongPasswordHere" # IMPORTANT: It's highly recommended to set the PG_PASSWORD
                                    # environment variable instead of hardcoding the password here.
                                    # Pydantic will pick up PG_PASSWORD from the environment.

  # Template for pg_hba.conf content.
  # Placeholders like {pg_database}, {pg_user}, {admin_group_ip}, {script_hash}
  # will be formatted by the setup script using other configuration values.
  # Use YAML's literal block scalar style for multi-line strings.
  hba_template: |
    # pg_hba.conf configured by script V{script_hash}
    # TYPE  DATABASE        USER            ADDRESS                 METHOD
    local   all             postgres                                peer
    local   all             all                                     peer
    local   {pg_database}    {pg_user}                                scram-sha-256
    host    all             all             127.0.0.1/32            scram-sha-256
    host    {pg_database}    {pg_user}        127.0.0.1/32            scram-sha-256
    host    {pg_database}    {pg_user}        {admin_group_ip}       scram-sha-256
    host    all             all             ::1/128                 scram-sha-256
    host    {pg_database}    {pg_user}        ::1/128                 scram-sha-256
    # Template for additions to postgresql.conf.
    # Supports placeholder {script_hash}.
    postgresql_conf_additions_template: |
      # --- TRANSIT SERVER CUSTOMISATIONS - Appended by script V{script_hash} ---
      listen_addresses = '*'
      shared_buffers = 2GB
      work_mem = 256MB
      maintenance_work_mem = 2GB
      checkpoint_timeout = 15min
      max_wal_size = 4GB
      min_wal_size = 2GB
      checkpoint_completion_target = 0.9
      effective_cache_size = 6GB
      logging_collector = on
      log_directory = 'log'
      log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
      log_min_duration_statement = 250ms
      # --- END TRANSIT SERVER CUSTOMISATIONS ---

# Apache Web Server Settings
apache:
  listen_port: 8080

  # ModTile settings
  mod_tile_request_timeout: 5
  mod_tile_missing_request_timeout: 30
  mod_tile_max_load_old: 2
  mod_tile_max_load_missing: 5

  mod_tile_conf_template: |
    # mod_tile.conf - Generated by script V{script_hash}
    LoadModule tile_module /usr/lib/apache2/modules/mod_tile.so

    ModTileRenderdSocketName /var/run/renderd/renderd.sock
    ModTileEnableStats On
    ModTileBulkMode Off
    ModTileRequestTimeout {mod_tile_request_timeout}
    ModTileMissingRequestTimeout {mod_tile_missing_request_timeout}
    ModTileMaxLoadOld {mod_tile_max_load_old}
    ModTileMaxLoadMissing {mod_tile_max_load_missing}

    <IfModule mod_expires.c>
        ExpiresActive On
        ExpiresByType image/png "access plus 1 month"
    </IfModule>
    <IfModule mod_headers.c>
        Header set Cache-Control "max-age=2592000, public"
    </IfModule>

  tile_site_template: |
    # Apache tile serving site - Generated by script V{script_hash}
    <VirtualHost *:{apache_listen_port}>
        ServerName {server_name_apache}
        ServerAdmin {admin_email_apache}

        # The URI /hot/ should match the URI in renderd.conf (e.g., [default] URI=/hot/).
        AddTileConfig /hot/ tile.openstreetmap.org 

        ErrorLog ${{APACHE_LOG_DIR}}/tiles_error.log
        CustomLog ${{APACHE_LOG_DIR}}/tiles_access.log combined
    </VirtualHost>

nginx:
  proxy_conf_name_base: "transit_proxy" # Base name for the conf file, e.g. transit_proxy.conf
  proxy_site_template: |
    # Nginx reverse proxy site - Generated by script V{script_hash}
    # For server: {server_name_nginx}

    server {{
        listen 80 default_server;
        listen [::]:80 default_server;

        # SSL settings below are typically managed by Certbot if you run it.
        # listen 443 ssl http2 default_server;
        # listen [::]:443 ssl http2 default_server;
        # ssl_certificate /etc/letsencrypt/live/{server_name_nginx}/fullchain.pem;
        # ssl_certificate_key /etc/letsencrypt/live/{server_name_nginx}/privkey.pem;
        # include /etc/letsencrypt/options-ssl-nginx.conf; 
        # ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

        server_name {server_name_nginx}; # Placeholder, will be replaced by app_settings.vm_ip_or_domain

        access_log /var/log/nginx/{proxy_conf_filename_base}.access.log;
        error_log /var/log/nginx/{proxy_conf_filename_base}.error.log;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_buffering off;

        location /vector/ {{
            proxy_pass http://localhost:{pg_tileserv_port}/; 
        }}
        location /raster/hot/ {{
            proxy_pass http://localhost:{apache_port}/hot/;
        }}
        location /route/v1/ {{ # Assumes car profile
            proxy_pass http://localhost:{osrm_port_car}/route/v1/;
        }}
        location / {{
            root {website_root_dir};
            index index.html index.htm;
            try_files $uri $uri/ /index.html =404;
        }}
    }}

# pg_tileserv upstream port for Nginx proxying
pg_tileserv:
  http_port: 7800

# OSRM upstream port(s) for Nginx proxying
osrm:
  car_profile_port: 5000
  # bicycle_profile_port: 5001 # Example if you had another

# Web Application content root
webapp:
  root_dir: "/var/www/html/map_test_page"