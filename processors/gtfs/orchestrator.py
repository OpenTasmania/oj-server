# processors/gtfs/orchestrator.py
# -*- coding: utf-8 -*-
"""
Main orchestrator for all GTFS-related setup and processing tasks.
This module provides the primary entry point for external callers (e.g., main installer)
to manage the GTFS data pipeline.
"""
import logging
from pathlib import Path
from typing import Optional, Dict

# Import the refactored GTFS components
from .environment import setup_gtfs_environment
from .runner import run_gtfs_etl_pipeline_and_verify
from .automation import configure_gtfs_update_cronjob

# Import common utilities if needed for logging within this orchestrator
from common.command_utils import log_map_server  # For top-level logging messages

module_logger = logging.getLogger(__name__)


class GTFSConfigError(Exception):
    """Custom exception for GTFS configuration issues."""
    pass


def process_and_setup_gtfs(
        # --- Core Configurations ---
        gtfs_feed_url: str,
        db_params: Dict[str, str],  # Expected keys: PGHOST, PGPORT, PGDATABASE, PGUSER, PGPASSWORD
        project_root: Path,

        # --- Logging Specific to GTFS Processing ---
        # This is for the application logs generated by the GTFS pipeline itself.
        gtfs_app_log_file: Optional[str] = None,  # Passed to environment.setup_gtfs_environment
        gtfs_app_log_level: int = logging.INFO,  # Passed to environment.setup_gtfs_environment
        gtfs_app_log_prefix: str = "[GTFS-ETL]",  # Passed to environment.setup_gtfs_environment

        # --- Cron Job Specific Configurations ---
        cron_run_user: Optional[str] = None,  # User for the cron job (defaults to db_params['PGUSER'] or root)
        # This is for redirecting stdout/stderr from the cron job command itself.
        cron_job_output_log_file: Optional[str] = None,
        python_executable_for_cron: Optional[str] = None,  # Path to python for cron

        # --- Orchestrator's Own Logger ---
        # This logger is for messages generated by this orchestrator function itself.
        # It's assumed to be already configured by the calling script (e.g., main_installer.py).
        orchestrator_logger: Optional[logging.Logger] = None
) -> None:
    """
    Main public function to set up the environment, run the GTFS ETL pipeline,
    verify the import, and configure the update cron job.

    Args:
        gtfs_feed_url: URL of the GTFS feed.
        db_params: Dictionary with database connection parameters.
        project_root: Path to the project root directory.
        gtfs_app_log_file: Path for the GTFS application's own log file.
        gtfs_app_log_level: Logging level for the GTFS application logs.
        gtfs_app_log_prefix: Prefix for GTFS application log messages.
        cron_run_user: System user to run the cron job as.
        cron_job_output_log_file: File to redirect cron job's stdout/stderr.
        python_executable_for_cron: Specific python executable for the cron job.
        orchestrator_logger: Logger instance for this orchestrator's messages.
    """
    effective_logger = orchestrator_logger if orchestrator_logger else module_logger

    log_map_server("Starting full GTFS setup and processing...", "info", effective_logger)

    # Validate essential parameters
    if not gtfs_feed_url:
        log_map_server("GTFS Feed URL is missing. Cannot proceed.", "error", effective_logger)
        raise GTFSConfigError("GTFS Feed URL is required.")
    if not all(k in db_params for k in ["PGHOST", "PGPORT", "PGDATABASE", "PGUSER", "PGPASSWORD"]):
        log_map_server("One or more required database parameters are missing.", "error", effective_logger)
        raise GTFSConfigError("DB parameters (PGHOST, PGPORT, PGDATABASE, PGUSER, PGPASSWORD) are required.")
    if not project_root or not project_root.is_dir():
        log_map_server(f"Project root '{project_root}' is not a valid directory.", "error", effective_logger)
        raise GTFSConfigError("Valid project root path is required.")

    try:
        # Step 1: Setup GTFS processing environment (logging for GTFS modules, OS env vars)
        # This setup_gtfs_environment will configure logging that subsequent GTFS modules use.
        log_map_server("Step 1: Setting up GTFS environment (logging & OS vars)...", "info", effective_logger)
        setup_gtfs_environment(
            feed_url=gtfs_feed_url,
            db_params=db_params,
            log_file_path=gtfs_app_log_file,
            log_level=gtfs_app_log_level,
            log_prefix=gtfs_app_log_prefix
            # current_logger is not taken by setup_gtfs_environment; it uses its own module logger
            # or configures the root logger via common_setup_logging.
        )
        log_map_server("GTFS environment setup complete.", "info", effective_logger)

        # Step 2: Run the ETL pipeline and verify
        # This function uses the OS environment variables set in Step 1 for the pipeline,
        # and db_params directly for its psql verification part.
        # Its internal logging will go to the file configured in Step 1.
        log_map_server("Step 2: Running GTFS ETL pipeline and verification...", "info", effective_logger)
        run_gtfs_etl_pipeline_and_verify(
            db_params=db_params,  # For psql verification commands
            current_logger=effective_logger  # For messages from the runner function itself
        )
        log_map_server("GTFS ETL pipeline and verification complete.", "info", effective_logger)

        # Step 3: Configure cron job for automation
        log_map_server("Step 3: Configuring GTFS update cron job...", "info", effective_logger)
        configure_gtfs_update_cronjob(
            project_root_path=project_root,
            feed_url=gtfs_feed_url,
            db_params=db_params,
            cron_user_name=cron_run_user,
            cron_output_log_file=cron_job_output_log_file,
            python_executable_override=python_executable_for_cron,
            current_logger=effective_logger  # For messages from the automation config function itself
        )
        log_map_server("GTFS update cron job configuration complete.", "info", effective_logger)

        log_map_server("Full GTFS setup and processing completed successfully.", "success", effective_logger)

    except GTFSConfigError as e:  # pragma: no cover
        # Already logged by the function raising it or by checks here.
        log_map_server(f"GTFS Configuration Error: {e}", "critical", effective_logger)
        raise  # Re-raise to be caught by the main installer's step executor
    except RuntimeError as e:  # pragma: no cover
        # Typically raised by runner if ETL fails. Message already logged by runner.
        log_map_server(f"GTFS Processing Runtime Error: {e}", "critical", effective_logger)
        raise  # Re-raise
    except Exception as e:  # pragma: no cover
        log_map_server(f"An unexpected error occurred during GTFS setup and processing: {e}", "critical",
                       effective_logger, exc_info=True)
        raise  # Re-raise