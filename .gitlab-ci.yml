# Default image - can be overridden per job.
image: debian:trixie

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH && $CI_COMMIT_MESSAGE =~ /skip ci/
      when: never
    - if: $CI_COMMIT_BRANCH && $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"
      when: always # Always run for the first push to a new branch
    - if: $CI_COMMIT_BRANCH && $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA != "0000000000000000000000000000000000000000"
      changes:
        - "*.md"
      when: never
    - when: always # Default rule

stages:
  - build_images # New stage for building custom Docker images
  - ".pre"
  - lint
  - type
  - test
  - docs
  - commit_docs
  - ".post"

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  UV_CACHE_DIR: "$CI_PROJECT_DIR/.cache/uv"
  GIT_USER_EMAIL: "gitlab-ci@opentasmania.net"
  GIT_USER_NAME: "GitLab CI Bot"

  # Define names for custom Docker images
  PYTHON_BUILDER_IMAGE_BASE: $CI_REGISTRY_IMAGE/python-builder
  DOCS_BUILDER_IMAGE_BASE: $CI_REGISTRY_IMAGE/docs-builder

  # Docker-in-Docker settings
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""
  DOCKER_DRIVER: overlay2

  # --- TOGGLE FOR CUSTOM DOCKER IMAGES ---
  # Set to "true" to build and use custom CI images.
  # Set to "false" (or leave unset) to use stock Debian images and install tools on-the-fly.
  # REMEMBER: If "true", you must also uncomment the custom 'image:' lines in relevant jobs
  # (like .uv_setup, generate_documentation, commit_documentation),
  # and ensure the 'build_..._image' jobs ran successfully.
  # If "false", ensure the stock 'image:' lines are active in those jobs.
  USE_CUSTOM_CI_IMAGES: "false"

cache:
  key:
    files:
      - pyproject.toml
      - uv.lock
  paths:
    - ".cache/pip"
    - ".cache/uv"
    - ".mypy_cache"
    - ".pytest_cache"
    - ".ruff_cache"
    - ".venv"
    - "$HOME/.local/pipx" # Caches tools installed by pipx if not using custom images
  policy: pull-push

# Job to build and push the custom Python builder image
build_python_builder_image:
  stage: build_images
  image: docker:latest
  services:
    - docker:dind
  variables:
    TARGET_IMAGE: $PYTHON_BUILDER_IMAGE_BASE
    DOCKERFILE_PATH: dockerfiles/ci-images/python-builder.Dockerfile
    IMAGE_OS_TAG: trixie
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - IMAGE_TAG_SHA="$TARGET_IMAGE:$IMAGE_OS_TAG-$CI_COMMIT_SHA"
    - IMAGE_TAG_LATEST="$TARGET_IMAGE:$IMAGE_OS_TAG-latest"
    - echo "Building $DOCKERFILE_PATH and tagging as $IMAGE_TAG_SHA and $IMAGE_TAG_LATEST"
    - docker build -f $DOCKERFILE_PATH -t $IMAGE_TAG_SHA -t $IMAGE_TAG_LATEST .
    - docker push $IMAGE_TAG_SHA
    - docker push $IMAGE_TAG_LATEST
  rules:
    - if: $USE_CUSTOM_CI_IMAGES == "true" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == "push"
      changes:
        - dockerfiles/ci-images/python-builder.Dockerfile
    - if: $USE_CUSTOM_CI_IMAGES == "true"
      when: manual

# Job to build and push the custom docs builder image (now trixie-based)
build_docs_builder_image:
  stage: build_images
  image: docker:latest
  services:
    - docker:dind
  variables:
    TARGET_IMAGE: $DOCS_BUILDER_IMAGE_BASE
    DOCKERFILE_PATH: dockerfiles/ci-images/docs-builder.Dockerfile
    IMAGE_OS_TAG: trixie # Standardized to trixie
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - IMAGE_TAG_SHA="$TARGET_IMAGE:$IMAGE_OS_TAG-$CI_COMMIT_SHA"
    - IMAGE_TAG_LATEST="$TARGET_IMAGE:$IMAGE_OS_TAG-latest" # Will be docs-builder:trixie-latest
    - echo "Building $DOCKERFILE_PATH and tagging as $IMAGE_TAG_SHA and $IMAGE_TAG_LATEST"
    - docker build -f $DOCKERFILE_PATH -t $IMAGE_TAG_SHA -t $IMAGE_TAG_LATEST .
    - docker push $IMAGE_TAG_SHA
    - docker push $IMAGE_TAG_LATEST
  rules:
    - if: $USE_CUSTOM_CI_IMAGES == "true" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == "push"
      changes:
        - dockerfiles/ci-images/docs-builder.Dockerfile
    - if: $USE_CUSTOM_CI_IMAGES == "true"
      when: manual

.uv_setup:
  # CHOOSE ONE IMAGE LINE based on $USE_CUSTOM_CI_IMAGES setting:
  image: debian:trixie # ACTIVE if $USE_CUSTOM_CI_IMAGES is "false" or custom image not ready
  # image: ${PYTHON_BUILDER_IMAGE_BASE}:trixie-latest # ACTIVE if $USE_CUSTOM_CI_IMAGES is "true" AND python-builder image is built
  before_script:
    - |
      if [ "$USE_CUSTOM_CI_IMAGES" = "true" ]; then
        echo "Using custom Python builder image. System dependencies and uv are pre-installed."
        echo "--- uv version from image ---"
        uv --version
      else
        echo "USE_CUSTOM_CI_IMAGES is false/unset. Setting up Python environment on stock debian:trixie..."
        apt-get update -y
        echo "Performing full system upgrade on stock image (this may take some time)..."
        apt-get upgrade -y
        apt-get dist-upgrade -y
        echo "Installing base dependencies..."
        apt-get install -y --no-install-recommends curl git python3-full pipx postgresql-common libpq-dev
        echo "--- Pipx version ---"
        pipx --version
        echo "--- Installing uv using pipx ---"
        pipx install uv
        # Ensure pipx-installed binaries are in PATH (typically $HOME/.local/bin for user, /root/.local/bin for root)
        if ! command -v uv &> /dev/null && [ -d "$HOME/.local/bin" ]; then # Check $HOME first
          export PATH="$HOME/.local/bin:$PATH"
        elif ! command -v uv &> /dev/null && [ -d "/root/.local/bin" ]; then # Fallback for root if $HOME isn't /root
           export PATH="/root/.local/bin:$PATH"
        fi
        echo "--- uv version ---"
        uv --version
      fi
    - echo "--- Creating virtual environment with uv ---"
    - uv venv --python $(which python3) # .venv directory will be cached by GitLab CI cache
    - echo "--- Activating virtual environment (for context) ---"
    - source .venv/bin/activate
    - echo "--- Installing project dependencies with uv ---"
    - uv pip install .[dev]

Linting:
  extends: .uv_setup
  stage: lint
  script:
    - echo "Running Ruff linter (ruff check)..."
    - uv run ruff check .
    - echo "Checking Ruff formatting (ruff format --check)..."
    - uv run ruff format --check .

Type checking:
  extends: .uv_setup
  stage: type
  script:
    - echo "Running Mypy type checker..."
    - uv run mypy .

Testing:
  rules:
    - when: manual
    - if: $CI_COMMIT_TAG
  extends: .uv_setup
  stage: test
  script:
    - echo "Running Pytest tests..."
    - uv run pytest --cov --cov-report term --cov-report html:coverage.html --cov-report json:coverage.json --cov-report xml:coverage.xml tests
  coverage: "/TOTAL.*\\s+(\\d+%)$/"
  artifacts:
    expire_in: 1 week
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  interruptible: true

generate_documentation:
  stage: docs
  # CHOOSE ONE IMAGE LINE based on $USE_CUSTOM_CI_IMAGES setting:
  image: debian:trixie # ACTIVE if $USE_CUSTOM_CI_IMAGES is "false" or custom image not ready (Standardized to trixie)
  # image: ${DOCS_BUILDER_IMAGE_BASE}:trixie-latest # ACTIVE if $USE_CUSTOM_CI_IMAGES is "true" AND docs-builder (trixie-based) image is built
  rules:
    - when: manual
    - if: "$CI_COMMIT_TAG"
  before_script:
    - |
      if [ "$USE_CUSTOM_CI_IMAGES" = "true" ]; then
        echo "Using custom docs builder image (trixie-based). System dependencies, todocheck, and git-cliff are pre-installed."
      else
        echo "USE_CUSTOM_CI_IMAGES is false/unset. Setting up tools on stock debian:trixie..."
        apt-get update -y
        echo "Performing full system upgrade on stock image (this may take some time)..."
        apt-get upgrade -y
        apt-get dist-upgrade -y
        echo "Installing base dependencies for docs..."
        apt-get install -y --no-install-recommends git curl python3-full python3-pipx
        # Ensure pipx-installed binaries are in PATH
        if ! command -v todocheck &> /dev/null && [ -d "$HOME/.local/bin" ]; then
          export PATH="$HOME/.local/bin:$PATH"
        elif ! command -v todocheck &> /dev/null && [ -d "/root/.local/bin" ]; then
           export PATH="/root/.local/bin:$PATH"
        fi
        pipx install todocheck
        pipx install git-cliff
      fi
    - echo "--- todocheck version ---"
    - todocheck --version
    - echo "--- git-cliff version ---"
    - git-cliff --version
    - echo "Starting documentation generation for tag $CI_COMMIT_TAG"
  script:
    - echo "Generating CHANGELOG.md..."
    - git fetch --tags --depth=200
    - |
      TEMP_CHANGELOG_ENTRY="temp_changelog_entry.md"
      PREVIOUS_TAG=$(git describe --tags --abbrev=0 "HEAD^" 2>/dev/null)

      echo "## [$CI_COMMIT_TAG] - $(date +'%Y-%m-%d')" > $TEMP_CHANGELOG_ENTRY
      if [ -n "$PREVIOUS_TAG" ]; then
        echo "Generating changelog from $PREVIOUS_TAG to $CI_COMMIT_TAG"
        git-cliff --from-latest --tag "$CI_COMMIT_TAG" --previous-tag "$PREVIOUS_TAG" --output current_tag_changes.md || git-cliff --tag "$CI_COMMIT_TAG" --output current_tag_changes.md
      else
        echo "Generating changelog for the first tag $CI_COMMIT_TAG"
        git-cliff --tag "$CI_COMMIT_TAG" --output current_tag_changes.md
      fi

      if [ -s current_tag_changes.md ] && [ $(wc -l < current_tag_changes.md) -gt 1 ]; then
        if grep -qE "^## \[[0-9]+\.[0-9]+\.[0-9]+[^]]*\]" current_tag_changes.md; then
            sed -i '1d' current_tag_changes.md
        fi
      fi
      cat current_tag_changes.md >> $TEMP_CHANGELOG_ENTRY
      rm -f current_tag_changes.md

      if [ -f CHANGELOG.md ]; then
        cat CHANGELOG.md >> temp_full_changelog.md
        mv $TEMP_CHANGELOG_ENTRY CHANGELOG.md
        cat temp_full_changelog.md >> CHANGELOG.md
        rm temp_full_changelog.md
      else
        mv $TEMP_CHANGELOG_ENTRY CHANGELOG.md
      fi
    - echo "CHANGELOG.md content:"
    - cat CHANGELOG.md
    - echo "Generating TODO.md..."
    - todocheck --output TODO.md || echo "No TODOs found or todocheck issue."
    - echo "TODO.md content:"
    - cat TODO.md
  artifacts:
    paths:
      - CHANGELOG.md
      - TODO.md
    expire_in: 1 day

commit_documentation:
  stage: commit_docs
  # CHOOSE ONE IMAGE LINE based on $USE_CUSTOM_CI_IMAGES setting:
  image: debian:trixie # ACTIVE if $USE_CUSTOM_CI_IMAGES is "false" or custom image not ready (Standardized to trixie)
  # image: ${DOCS_BUILDER_IMAGE_BASE}:trixie-latest # ACTIVE if $USE_CUSTOM_CI_IMAGES is "true" AND docs-builder (trixie-based) image is built
  rules:
    - when: manual
    - if: "$CI_COMMIT_TAG"
  needs:
    - job: generate_documentation
      artifacts: true
  before_script:
    - |
      if [ "$USE_CUSTOM_CI_IMAGES" = "true" ]; then
        echo "Using custom docs builder image (trixie-based). Git is pre-installed."
      else
        echo "USE_CUSTOM_CI_IMAGES is false/unset. Installing git on stock debian:trixie..."
        apt-get update -y
        echo "Performing full system upgrade on stock image (this may take some time)..."
        apt-get upgrade -y
        apt-get dist-upgrade -y
        echo "Installing git..."
        apt-get install -y --no-install-recommends git
      fi
    - git config --global user.email "${GIT_USER_EMAIL}"
    - git config --global user.name "${GIT_USER_NAME}"
    - git remote set-url origin "https://gitlab-ci-token:${GITLAB_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git"
  script:
    - git checkout $CI_DEFAULT_BRANCH
    - git pull origin $CI_DEFAULT_BRANCH
    - git add CHANGELOG.md TODO.md
    - |
      if git diff --staged --quiet; then
        echo "No changes to CHANGELOG.md or TODO.md to commit."
      else
        echo "Committing and pushing CHANGELOG.md and TODO.md..."
        git commit -m "docs: Update CHANGELOG.md and TODO.md for tag $CI_COMMIT_TAG [ci skip]"
        git push origin $CI_DEFAULT_BRANCH
        echo "Documentation updates pushed to $CI_DEFAULT_BRANCH."
      fi