image: debian:bookworm

stages:
  - lint
  - type
# - test
  - docs
  - commit_docs

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  UV_CACHE_DIR: "$CI_PROJECT_DIR/.cache/uv"
  GIT_USER_EMAIL: "gitlab-ci@opentasmania.net"
  GIT_USER_NAME: "GitLab CI Bot"
  # IMPORTANT: Set GITLAB_TOKEN as a masked, protected CI/CD variable in your project settings
  #            Go to Settings > CI/CD > Variables. It needs 'api' and 'write_repository' scope.

cache:
  key: "${CI_JOB_NAME}"
  paths:
    - .cache/pip
    - .cache/uv
    - .mypy_cache
    - .pytest_cache
    - .ruff_cache
    - .venv

.uv_setup: &uv_setup
  before_script:
    - apt-get update -y
    - apt-get install -y python3-full curl git
    - python3 -V
    - python3 -m pip install --upgrade pip
    - pip install uv
    - uv --version
    - uv venv --python $(which python3)
    - uv pip install .[dev]

Linting:
  <<: *uv_setup
  stage: lint
  script:
    - echo "Running Ruff linter (ruff check)..."
    - uv run -- ruff check .
    - echo "Checking Ruff formatting (ruff format --check)..."
    - uv run -- ruff format --check .
    - echo "Checking Black formatting (black --check)..."
    - uv run -- black --check .

Type checking:
  <<: *uv_setup
  stage: type
  script:
    - uv run -- mypy .

# Testing:
#   <<: *uv_setup
#   stage: test
#   script:
#     - uv run -- pytest --cov --cov-report term --cov-report html:coverage.html --cov-report json:coverage.json --cov-report xml:coverage.xml tests
#   coverage: '/TOTAL.*\s+(\d+%)$/'
#   artifacts:
#     expire_in: 1 week
#     reports:
#       coverage_report:
#         coverage_format: cobertura
#         path: cover/ # Make sure this path matches where cobertura.xml is generated
#   interruptible: true

generate_documentation:
  stage: docs
  image: debian:bookworm
  before_script:
    - echo "Starting documentation generation for tag $CI_COMMIT_TAG"
    - apt-get update -y
    - apt-get install -y git curl python3-pip wget
    - pip3 install todocheck

    # Install git-cliff (changelog generator)
    - |
      LATEST_CLIFF_VERSION=$(curl -s "https://api.github.com/repos/orhun/git-cliff/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
      if [ -z "$LATEST_CLIFF_VERSION" ]; then echo "Failed to fetch latest git-cliff version"; exit 1; fi
      CLIFF_URL="https://github.com/orhun/git-cliff/releases/download/${LATEST_CLIFF_VERSION}/git-cliff-${LATEST_CLIFF_VERSION}-x86_64-unknown-linux-musl.tar.gz"
      echo "Downloading git-cliff from $CLIFF_URL"
      wget -q "$CLIFF_URL" -O git-cliff.tar.gz
      tar -xzf git-cliff.tar.gz
      mv git-cliff-*/git-cliff /usr/local/bin/
      rm -rf git-cliff.tar.gz git-cliff-*
      git-cliff --version

  script:
    # 1. Generate CHANGELOG.md
    - echo "Generating CHANGELOG.md..."
    - git fetch --tags --depth=200 # Fetch enough history and all tags for git-cliff

    # Configure git-cliff with a cliff.toml file in your repo root, or use default settings.
    # This example creates a new entry for the current tag and prepends it.
    - |
      TEMP_CHANGELOG_ENTRY="temp_changelog_entry.md"
      # Get the previous tag. If no previous tag, it means this is the first tag.
      PREVIOUS_TAG=$(git describe --tags --abbrev=0 "HEAD^" 2>/dev/null)

      echo "## [$CI_COMMIT_TAG] - $(date +'%Y-%m-%d')" > $TEMP_CHANGELOG_ENTRY
      if [ -n "$PREVIOUS_TAG" ]; then
        echo "Generating changelog from $PREVIOUS_TAG to $CI_COMMIT_TAG"
        git-cliff --from-latest --tag "$CI_COMMIT_TAG" --previous-tag "$PREVIOUS_TAG" --output current_tag_changes.md || git-cliff --tag "$CI_COMMIT_TAG" --output current_tag_changes.md
      else
        echo "Generating changelog for the first tag $CI_COMMIT_TAG"
        git-cliff --tag "$CI_COMMIT_TAG" --output current_tag_changes.md
      fi

      # Remove the title generated by git-cliff if you want your own (optional)
      # Check if current_tag_changes.md has more than 1 line (to avoid error with empty changelog)
      if [ -s current_tag_changes.md ] && [ $(wc -l < current_tag_changes.md) -gt 1 ]; then
        sed -i '1d' current_tag_changes.md # Removes the "## [tag]..." line from git-cliff output if present
      fi
      cat current_tag_changes.md >> $TEMP_CHANGELOG_ENTRY
      rm -f current_tag_changes.md

      if [ -f CHANGELOG.md ]; then
        cat CHANGELOG.md >> temp_full_changelog.md
        mv $TEMP_CHANGELOG_ENTRY CHANGELOG.md
        cat temp_full_changelog.md >> CHANGELOG.md
        rm temp_full_changelog.md
      else
        mv $TEMP_CHANGELOG_ENTRY CHANGELOG.md
      fi
    - echo "CHANGELOG.md content:"
    - cat CHANGELOG.md

    # 2. Generate TODO.md
    - echo "Generating TODO.md..."
    # todocheck scans the current directory by default. Configure paths/extensions if needed.
    # Example: todocheck --output TODO.md src/ tests/
    # It will overwrite TODO.md or create it.
    - todocheck --output TODO.md || echo "No TODOs found or todocheck issue." # Ensure job doesn't fail if no TODOs
    - echo "TODO.md content:"
    - cat TODO.md

  artifacts:
    paths:
      - CHANGELOG.md
      - TODO.md
    expire_in: 1 day # Keep artifacts for a day
  rules:
    - if: $CI_COMMIT_TAG # Run only when a Git tag is created

commit_documentation:
  stage: commit_docs
  image: debian:bookworm
  needs:
    - job: generate_documentation
      artifacts: true
  before_script:
    - apt-get update -y && apt-get install -y git
    - git config --global user.email "${GIT_USER_EMAIL}"
    - git config --global user.name "${GIT_USER_NAME}"
    # Configure remote with the token for pushing
    - git remote set-url origin "https://gitlab-ci-token:${GITLAB_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git"
  script:
    # Tags point to specific commits. To commit the docs, we typically push to a branch.
    # This example pushes to your default branch ($CI_DEFAULT_BRANCH).
    # Adjust this strategy if your tags are not meant to trigger updates on the default branch.
    - git checkout $CI_DEFAULT_BRANCH
    - git pull origin $CI_DEFAULT_BRANCH # Ensure local default branch is up-to-date

    - git add CHANGELOG.md TODO.md
    - |
      if git diff --staged --quiet; then
        echo "No changes to CHANGELOG.md or TODO.md to commit."
      else
        echo "Committing and pushing CHANGELOG.md and TODO.md..."
        git commit -m "docs: Update CHANGELOG.md and TODO.md for tag $CI_COMMIT_TAG [ci skip]"
        git push origin $CI_DEFAULT_BRANCH
        echo "Documentation updates pushed to $CI_DEFAULT_BRANCH."
      fi
  rules:
    - if: $CI_COMMIT_TAG