image: debian:trixie

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH && $CI_COMMIT_MESSAGE =~ /skip ci/
      when: never
    - if: $CI_COMMIT_BRANCH && $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE_SHA != "0000000000000000000000000000000000000000"
      changes:
        - "*.md"
      when: never
    - when: always


stages:
  - ".pre"
  - lint
  - type
  - test
  - docs
  - commit_docs
  - ".post"

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  UV_CACHE_DIR: "$CI_PROJECT_DIR/.cache/uv"
  GIT_USER_EMAIL: "gitlab-ci@opentasmania.net"
  GIT_USER_NAME: "GitLab CI Bot"

cache:
  key:
    files :
    - pyproject.toml
    - uv.lock
  paths:
    - ".cache/pip"
    - ".cache/uv"
    - ".mypy_cache"
    - ".pytest_cache"
    - ".ruff_cache"
    - ".venv"
    - "$HOME/.local/pipx"

.uv_setup:
  before_script:
    - echo "Setting up Python environment with uv..."
    - apt-get update -y
    - apt-get install -y build-essential curl git python3-full pipx postgresql-common libpq-dev libpython3-dev
    - echo "--- Pipx version ---"
    - pipx --version
    - echo "--- Installing uv using pipx ---"
    - pipx install uv
    - export PATH="/root/.local/bin:$PATH"
    - echo "--- uv version ---"
    - uv --version
    - echo "--- Creating virtual environment with uv ---"
    - uv venv --python $(which python3)
    - echo "--- Installing project dependencies with uv ---"
    - uv pip install .[dev]

Linting:
  extends: .uv_setup
  stage: lint
  script:
    - echo "Running Ruff linter (ruff check)..."
    - uv run ruff check .
    - echo "Checking Ruff formatting (ruff format --check)..."
    - uv run ruff format --check .
    - echo "Checking Black formatting (black --check)..."
    - uv run black --check .

Type checking:
  extends: .uv_setup #
  stage: type
  script:
    - echo "Running Mypy type checker..."
    - uv run mypy .

Testing:
  rules:
    - when: manual
    - if: $CI_COMMIT_TAG
  extends: .uv_setup
  stage: test
  script:
    - echo "Running Pytest tests..."
    - uv run pytest --cov --cov-report term --cov-report html:coverage.html --cov-report json:coverage.json --cov-report xml:coverage.xml tests
  coverage: "/TOTAL.*\\s+(\\d+%)$/"
  artifacts:
    expire_in: 1 week
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  interruptible: true

generate_documentation:
  stage: docs
  image: debian:bookworm # Stays on debian:bookworm
  rules:
    - when: manual
    - if: "$CI_COMMIT_TAG"
  before_script:
    - echo "Starting documentation generation for tag $CI_COMMIT_TAG"
    - apt-get update -y
    - apt-get install -y git curl python3-pipx
    - pipx --version
    - echo "--- Installing todocheck and git-cliff using pipx ---"
    - pipx install todocheck
    - pipx install git-cliff
    - echo "--- todocheck version ---"
    - todocheck --version
    - echo "--- git-cliff version ---"
    - git-cliff --version
  script:
    - echo "Generating CHANGELOG.md..."
    - git fetch --tags --depth=200
    - |
      TEMP_CHANGELOG_ENTRY="temp_changelog_entry.md"
      PREVIOUS_TAG=$(git describe --tags --abbrev=0 "HEAD^" 2>/dev/null)

      echo "## [$CI_COMMIT_TAG] - $(date +'%Y-%m-%d')" > $TEMP_CHANGELOG_ENTRY
      if [ -n "$PREVIOUS_TAG" ]; then
        echo "Generating changelog from $PREVIOUS_TAG to $CI_COMMIT_TAG"
        git-cliff --from-latest --tag "$CI_COMMIT_TAG" --previous-tag "$PREVIOUS_TAG" --output current_tag_changes.md || git-cliff --tag "$CI_COMMIT_TAG" --output current_tag_changes.md
      else
        echo "Generating changelog for the first tag $CI_COMMIT_TAG"
        git-cliff --tag "$CI_COMMIT_TAG" --output current_tag_changes.md
      fi

      if [ -s current_tag_changes.md ] && [ $(wc -l < current_tag_changes.md) -gt 1 ]; then
        if grep -qE "^## \[[0-9]+\.[0-9]+\.[0-9]+[^]]*\]" current_tag_changes.md; then
            sed -i '1d' current_tag_changes.md
        fi
      fi
      cat current_tag_changes.md >> $TEMP_CHANGELOG_ENTRY
      rm -f current_tag_changes.md

      if [ -f CHANGELOG.md ]; then
        cat CHANGELOG.md >> temp_full_changelog.md
        mv $TEMP_CHANGELOG_ENTRY CHANGELOG.md
        cat temp_full_changelog.md >> CHANGELOG.md
        rm temp_full_changelog.md
      else
        mv $TEMP_CHANGELOG_ENTRY CHANGELOG.md
      fi
    - echo "CHANGELOG.md content:"
    - cat CHANGELOG.md
    - echo "Generating TODO.md..."
    - todocheck --output TODO.md || echo "No TODOs found or todocheck issue."
    - echo "TODO.md content:"
    - cat TODO.md
  artifacts:
    paths:
      - CHANGELOG.md
      - TODO.md
    expire_in: 1 day

commit_documentation:
  stage: commit_docs
  rules:
    - when: manual
    - if: "$CI_COMMIT_TAG"
  image: debian:bookworm
  needs:
    - job: generate_documentation
      artifacts: true
  before_script:
    - apt-get update -y && apt-get install -y git
    - git config --global user.email "${GIT_USER_EMAIL}"
    - git config --global user.name "${GIT_USER_NAME}"
    - git remote set-url origin "https://gitlab-ci-token:${GITLAB_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git"
  script:
    - git checkout $CI_DEFAULT_BRANCH
    - git pull origin $CI_DEFAULT_BRANCH
    - git add CHANGELOG.md TODO.md
    - |
      if git diff --staged --quiet; then
        echo "No changes to CHANGELOG.md or TODO.md to commit."
      else
        echo "Committing and pushing CHANGELOG.md and TODO.md..."
        git commit -m "docs: Update CHANGELOG.md and TODO.md for tag $CI_COMMIT_TAG [ci skip]"
        git push origin $CI_DEFAULT_BRANCH
        echo "Documentation updates pushed to $CI_DEFAULT_BRANCH."
      fi