# see git-cliff docs for more options
[changelog]
header = """
# Changelog
All notable changes to this project will be documented in this file.
See [Conventional Commits](https://conventionalcommits.org) for commit guidelines.
"""
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits %}
        - {% if commit.scope %}(**{{ commit.scope }}**) {% endif %}{{ commit.message | upper_first }} ([`{{ commit.id | truncate(length=7, end="") }}`]({{ commit.hyperlinks.commit }}))\
    {% endfor %}
{% endfor %}\n
"""
trim = true
footer = ""

[git]
conventional_commits = true
filter_unconventional = false
split_commits = false # Keep all commits under the latest tag
commit_parsers = [# Adjust to commit message conventions
    { message = "^feat", group = "Features" },
    { message = "^fix", group = "Bug Fixes" },
    { message = "^docs", group = "Documentation" },
    { message = "^style", group = "Styling" },
    { message = "^refactor", group = "Refactoring" },
    { message = "^perf", group = "Performance Improvements" },
    { message = "^test", group = "Testing" },
    { message = "^chore", group = "Chores" },
    { message = "^build", group = "Build System" },
    # { body = ".*security", group = "Security"}, # Example for parsing body
]
protect_breaking_commits = false
filter_commits = false
tag_pattern = "[0-9].*"
skip_tags = "0.1.0-beta\\.[0-9]+"
sort_commits = "oldest"