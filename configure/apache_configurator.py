# configure/apache_configurator.py
# -*- coding: utf-8 -*-
"""
Handles configuration of Apache webserver with mod_tile.
"""
import logging
import os
from typing import Optional

from common.command_utils import log_map_server, run_elevated_command, elevated_command_exists
from common.file_utils import backup_file
from common.system_utils import systemd_reload
from setup import config  # For SYMBOLS, VM_IP_OR_DOMAIN etc.
from setup.state_manager import get_current_script_hash

module_logger = logging.getLogger(__name__)

PORTS_CONF_PATH = "/etc/apache2/ports.conf"
MOD_TILE_CONF_AVAILABLE_PATH = "/etc/apache2/conf-available/mod_tile.conf"
APACHE_TILES_SITE_CONF_AVAILABLE_PATH = "/etc/apache2/sites-available/001-tiles.conf"


def configure_apache_ports(current_logger: Optional[logging.Logger] = None) -> None:
    """Modifies Apache's listening port (e.g., from 80 to 8080)."""
    logger_to_use = current_logger if current_logger else module_logger
    log_map_server(f"{config.SYMBOLS['step']} Configuring Apache listening ports...", "info", logger_to_use)

    if not os.path.exists(PORTS_CONF_PATH):  # Check first, then backup
        # Attempt an elevated check if the initial check fails - backup_file does this too
        try:
            run_elevated_command(["test", "-f", PORTS_CONF_PATH], check=True, capture_output=True,
                                 current_logger=logger_to_use)
        except Exception:
            log_map_server(
                f"{config.SYMBOLS['critical']} Apache ports configuration file {PORTS_CONF_PATH} not found. Cannot configure ports.",
                "critical", logger_to_use)
            raise FileNotFoundError(f"{PORTS_CONF_PATH} not found.")

    if backup_file(PORTS_CONF_PATH,
                   current_logger=logger_to_use):  # backup_file now returns True if file existed and was backed up (or didn't exist)
        # This sed command replaces "Listen 80" with "Listen 8080".
        run_elevated_command(
            ["sed", "-i.bak_ports_sed", "s/^Listen 80$/Listen 8080/", PORTS_CONF_PATH],
            current_logger=logger_to_use
        )
        run_elevated_command(  # Also for IPv6
            ["sed", "-i", "s/^Listen \\[::\\]:80$/Listen [::]:8080/", PORTS_CONF_PATH],
            current_logger=logger_to_use, check=False  # Allow to fail if IPv6 not present
        )
        log_map_server(f"{config.SYMBOLS['success']} Apache configured to listen on port 8080 (original backed up).",
                       "success", logger_to_use)
    # If backup_file returned False due to an issue other than file not existing initially, it would have logged.
    # If it returned true because file didn't exist, the earlier check would have caught it.


def create_mod_tile_config(current_logger: Optional[logging.Logger] = None) -> None:
    """Creates /etc/apache2/conf-available/mod_tile.conf."""
    logger_to_use = current_logger if current_logger else module_logger
    script_hash = get_current_script_hash(logger_instance=logger_to_use) or "UNKNOWN_HASH"
    log_map_server(f"{config.SYMBOLS['step']} Creating mod_tile Apache configuration...", "info", logger_to_use)

    mod_tile_conf_content = f"""\
# {MOD_TILE_CONF_AVAILABLE_PATH} - Generated by script V{script_hash}
LoadModule tile_module /usr/lib/apache2/modules/mod_tile.so

ModTileRenderdSocketName /var/run/renderd/renderd.sock
ModTileEnableStats On
ModTileBulkMode Off
ModTileRequestTimeout 5
ModTileMissingRequestTimeout 30
ModTileMaxLoadOld 2
ModTileMaxLoadMissing 5

<IfModule mod_expires.c>
    ExpiresActive On
    ExpiresByType image/png "access plus 1 month"
</IfModule>
<IfModule mod_headers.c>
    Header set Cache-Control "max-age=2592000, public"
</IfModule>
"""
    try:
        run_elevated_command(
            ["tee", MOD_TILE_CONF_AVAILABLE_PATH],
            cmd_input=mod_tile_conf_content, current_logger=logger_to_use
        )
        log_map_server(f"{config.SYMBOLS['success']} Created/Updated {MOD_TILE_CONF_AVAILABLE_PATH}", "success",
                       logger_to_use)
    except Exception as e:
        log_map_server(f"{config.SYMBOLS['error']} Failed to write {MOD_TILE_CONF_AVAILABLE_PATH}: {e}", "error",
                       logger_to_use)
        raise


def create_apache_tile_site_config(current_logger: Optional[logging.Logger] = None) -> None:
    """Creates the Apache site configuration for serving tiles."""
    logger_to_use = current_logger if current_logger else module_logger
    script_hash = get_current_script_hash(logger_instance=logger_to_use) or "UNKNOWN_HASH"
    log_map_server(f"{config.SYMBOLS['step']} Creating Apache tile serving site configuration...", "info",
                   logger_to_use)

    server_name = config.VM_IP_OR_DOMAIN if config.VM_IP_OR_DOMAIN != config.VM_IP_OR_DOMAIN_DEFAULT else "tiles.localhost"
    admin_email = f"webmaster@{config.VM_IP_OR_DOMAIN}" if config.VM_IP_OR_DOMAIN != config.VM_IP_OR_DOMAIN_DEFAULT else "webmaster@localhost"

    apache_tiles_site_content = apache_tiles_site_content = f"""\
# {APACHE_TILES_SITE_CONF_AVAILABLE_PATH} - Generated by script V{script_hash}
<VirtualHost *:8080>
    ServerName {server_name}
    ServerAdmin {admin_email}

    # The URI /hot/ should match the URI in renderd.conf (e.g., [default] URI=/hot/).
    AddTileConfig /hot/ tile.openstreetmap.org 

    ErrorLog ${{APACHE_LOG_DIR}}/tiles_error.log
    CustomLog ${{APACHE_LOG_DIR}}/tiles_access.log combined
</VirtualHost>
"""
    try:
        run_elevated_command(
            ["tee", APACHE_TILES_SITE_CONF_AVAILABLE_PATH],
            cmd_input=apache_tiles_site_content, current_logger=logger_to_use
        )
        log_map_server(f"{config.SYMBOLS['success']} Created/Updated {APACHE_TILES_SITE_CONF_AVAILABLE_PATH}",
                       "success", logger_to_use)
    except Exception as e:
        log_map_server(f"{config.SYMBOLS['error']} Failed to write {APACHE_TILES_SITE_CONF_AVAILABLE_PATH}: {e}",
                       "error", logger_to_use)
        raise


def manage_apache_modules_and_sites(current_logger: Optional[logging.Logger] = None) -> None:
    """Enables necessary Apache configurations, modules, and sites."""
    logger_to_use = current_logger if current_logger else module_logger
    log_map_server(f"{config.SYMBOLS['step']} Enabling Apache modules and site configurations...", "info",
                   logger_to_use)

    # Enable mod_tile.conf (which loads the module)
    run_elevated_command(["a2enconf", "mod_tile"], current_logger=logger_to_use)
    # Enable other modules
    for mod in ["expires", "headers"]:
        run_elevated_command(["a2enmod", mod], current_logger=logger_to_use)

    # Enable the tile site
    tile_site_name = os.path.basename(APACHE_TILES_SITE_CONF_AVAILABLE_PATH).replace(".conf", "")
    run_elevated_command(["a2ensite", tile_site_name], current_logger=logger_to_use)

    # Disable default site
    default_site_enabled_path = "/etc/apache2/sites-enabled/000-default.conf"
    # Check if symlink exists (meaning it's enabled)
    if elevated_command_exists(f"test -L {default_site_enabled_path}"):  # Simplified check
        # elevated_command_exists can use 'test -L' which returns 0 if true
        test_result = run_elevated_command(["test", "-L", default_site_enabled_path], check=False, capture_output=True,
                                           current_logger=logger_to_use)
        if test_result.returncode == 0:
            log_map_server(f"{config.SYMBOLS['info']} Disabling default Apache site (000-default)...", "info",
                           logger_to_use)
            run_elevated_command(["a2dissite", "000-default"], current_logger=logger_to_use)
        else:
            log_map_server(
                f"{config.SYMBOLS['info']} Default Apache site not enabled or does not exist at {default_site_enabled_path}. Skipping disable.",
                "info", logger_to_use)

    log_map_server(f"{config.SYMBOLS['success']} Apache modules and sites configured.", "success", logger_to_use)


def activate_apache_service(current_logger: Optional[logging.Logger] = None) -> None:
    """Reloads systemd, restarts and enables the Apache service."""
    logger_to_use = current_logger if current_logger else module_logger
    log_map_server(f"{config.SYMBOLS['step']} Activating Apache service...", "info", logger_to_use)

    systemd_reload(current_logger=logger_to_use)
    run_elevated_command(["systemctl", "restart", "apache2.service"], current_logger=logger_to_use)
    run_elevated_command(["systemctl", "enable", "apache2.service"], current_logger=logger_to_use)

    log_map_server(f"{config.SYMBOLS['info']} Apache service status:", "info", logger_to_use)
    run_elevated_command(["systemctl", "status", "apache2.service", "--no-pager", "-l"], current_logger=logger_to_use)
    log_map_server(f"{config.SYMBOLS['success']} Apache service activated.", "success", logger_to_use)