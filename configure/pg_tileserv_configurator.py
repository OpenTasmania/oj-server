# configure/pg_tileserv_configurator.py
# -*- coding: utf-8 -*-
"""
Handles configuration of pg_tileserv, including its config file,
database interactions (if any beyond main user), and service activation.
"""
import logging
import os
from typing import Optional

from common.command_utils import log_map_server, run_elevated_command
from common.system_utils import systemd_reload  # Import from common
from setup import config  # For config vars and SYMBOLS
from setup.state_manager import get_current_script_hash

module_logger = logging.getLogger(__name__)

PG_TILESERV_CONFIG_DIR = "/etc/pg_tileserv"
PG_TILESERV_CONFIG_FILE = os.path.join(PG_TILESERV_CONFIG_DIR, "config.toml")
PGTILESERV_SYSTEM_USER = "pgtileserv_user"  # Must match user in installer


def create_pg_tileserv_config_file(current_logger: Optional[logging.Logger] = None) -> None:
    """Creates the pg_tileserv config.toml file and sets its permissions."""
    logger_to_use = current_logger if current_logger else module_logger
    script_hash = get_current_script_hash(logger_instance=logger_to_use) or "UNKNOWN_HASH"
    log_map_server(f"{config.SYMBOLS['step']} Creating pg_tileserv configuration file...", "info", logger_to_use)

    run_elevated_command(["mkdir", "-p", PG_TILESERV_CONFIG_DIR], current_logger=logger_to_use)

    db_url_for_config = (
        f"postgresql://{config.PGUSER}:{config.PGPASSWORD}@"
        f"{config.PGHOST}:{config.PGPORT}/{config.PGDATABASE}"
    )
    if config.PGPASSWORD == config.PGPASSWORD_DEFAULT and not config.DEV_OVERRIDE_UNSAFE_PASSWORD:
        log_map_server(
            f"{config.SYMBOLS['warning']} Default PGPASSWORD in pg_tileserv config.toml. "
            "Service may not connect if password not updated or dev override not active for DB user.",
            "warning",
            logger_to_use,
        )
        # Using placeholder in config is safer than literal default if it's bad
        db_url_for_config = (
            f"postgresql://{config.PGUSER}:YOUR_PASSWORD_HERE@"
            f"{config.PGHOST}:{config.PGPORT}/{config.PGDATABASE}"
        )

    pg_tileserv_config_content = f"""# pg_tileserv config generated by script V{script_hash}
HttpHost = "0.0.0.0"
HttpPort = 7800 # Default pg_tileserv port
DatabaseURL = "{db_url_for_config}"
DefaultMaxFeatures = 10000
PublishSchemas = "public,gtfs" # Schemas to publish
URIPrefix = "/vector"          # Base URI for tile requests (matches Nginx proxy)
DevelopmentMode = false
AllowFunctionSources = true
"""
    try:
        run_elevated_command(
            ["tee", PG_TILESERV_CONFIG_FILE],
            cmd_input=pg_tileserv_config_content,
            current_logger=logger_to_use
        )
        log_map_server(f"{config.SYMBOLS['success']} Created/Updated {PG_TILESERV_CONFIG_FILE}", "success",
                       logger_to_use)

        # Set ownership and permissions for config file
        run_elevated_command(
            ["chown", f"{PGTILESERV_SYSTEM_USER}:{PGTILESERV_SYSTEM_USER}", PG_TILESERV_CONFIG_FILE],
            current_logger=logger_to_use
        )
        run_elevated_command(["chmod", "640", PG_TILESERV_CONFIG_FILE], current_logger=logger_to_use)
        log_map_server(f"{config.SYMBOLS['success']} Permissions set for {PG_TILESERV_CONFIG_FILE}.", "success",
                       logger_to_use)

    except Exception as e:
        log_map_server(f"{config.SYMBOLS['error']} Failed to write pg_tileserv config: {e}", "error", logger_to_use)
        raise


def activate_pg_tileserv_service(current_logger: Optional[logging.Logger] = None) -> None:
    """Reloads systemd, enables and restarts the pg_tileserv service."""
    logger_to_use = current_logger if current_logger else module_logger
    log_map_server(f"{config.SYMBOLS['step']} Activating pg_tileserv systemd service...", "info", logger_to_use)

    systemd_reload(current_logger=logger_to_use)  # Uses common.system_utils.systemd_reload
    run_elevated_command(["systemctl", "enable", "pg_tileserv.service"], current_logger=logger_to_use)
    run_elevated_command(["systemctl", "restart", "pg_tileserv.service"], current_logger=logger_to_use)

    log_map_server(f"{config.SYMBOLS['info']} pg_tileserv service status:", "info", logger_to_use)
    run_elevated_command(["systemctl", "status", "pg_tileserv.service", "--no-pager", "-l"],
                         current_logger=logger_to_use)
    log_map_server(f"{config.SYMBOLS['success']} pg_tileserv service activated.", "success", logger_to_use)