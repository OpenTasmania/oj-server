# configure/renderd_configurator.py
# -*- coding: utf-8 -*-
"""
Handles configuration of Renderd, including its .conf file,
and service activation.
"""
import logging
import os
from os.path import isdir
from typing import Optional

from common.command_utils import (
    log_map_server,
    run_command,
    run_elevated_command,
    command_exists
)
from common.system_utils import systemd_reload
from installer.renderd_installer import RENDERD_GROUP
from setup import config  # For SYMBOLS, VM_IP_OR_DOMAIN etc.
from setup.state_manager import get_current_script_hash

module_logger = logging.getLogger(__name__)

RENDERD_CONF_PATH = "/etc/renderd.conf"  # Must match path in service file
RENDERD_USER = "www-data"  # User that will run renderd, for file permissions


def get_mapnik_plugin_dir(current_logger: Optional[logging.Logger] = None) -> str:
    """Determines the Mapnik plugins directory."""
    logger_to_use = current_logger if current_logger else module_logger
    default_plugins_dir = "/usr/lib/x86_64-linux-gnu/mapnik/4.0/input/"

    if isdir(default_plugins_dir):
        log_map_server(f"{config.SYMBOLS['info']} Using default Mapnik plugins directory: {default_plugins_dir}",
                       "info", logger_to_use)
        return default_plugins_dir

    if command_exists("mapnik-config"):
        try:
            mapnik_config_res = run_command(
                ["mapnik-config", "--input-plugins"],
                capture_output=True, check=True, current_logger=logger_to_use
            )
            resolved_dir = mapnik_config_res.stdout.strip()
            log_map_server(
                f"{config.SYMBOLS['info']} Determined Mapnik plugins directory via mapnik-config: {resolved_dir}",
                "info", logger_to_use)
            return resolved_dir
        except Exception as e_mapnik:
            log_map_server(
                f"{config.SYMBOLS['warning']} Could not determine Mapnik plugins directory via mapnik-config ({e_mapnik}). Using fallback: {default_plugins_dir}",
                "warning", logger_to_use)
            return default_plugins_dir
    else:
        log_map_server(
            f"{config.SYMBOLS['warning']} 'mapnik-config' command not found. Using fallback Mapnik plugins directory: {default_plugins_dir}",
            "warning", logger_to_use)
        raise


def create_renderd_conf_file(current_logger: Optional[logging.Logger] = None) -> None:
    """Creates the /etc/renderd.conf file."""
    logger_to_use = current_logger if current_logger else module_logger
    script_hash = get_current_script_hash(logger_instance=logger_to_use) or "UNKNOWN_HASH"
    log_map_server(f"{config.SYMBOLS['step']} Creating {RENDERD_CONF_PATH}...", "info", logger_to_use)

    num_threads = str((os.cpu_count() or 2) * 2)  # Similar to original logic
    mapnik_plugins_dir = get_mapnik_plugin_dir(current_logger=logger_to_use)

    renderd_host = (
        config.VM_IP_OR_DOMAIN
        if config.VM_IP_OR_DOMAIN != config.VM_IP_OR_DOMAIN_DEFAULT
        else "localhost"
    )
    # Ensure XML path is correct based on where Carto step deploys it
    mapnik_xml_path = "/usr/local/share/maps/style/openstreetmap-carto/mapnik.xml"

    renderd_conf_content = f"""# {RENDERD_CONF_PATH} - Generated by script V{script_hash}
[renderd]
num_threads={num_threads}
tile_dir={config.TILE_CACHE_DIR if hasattr(config, 'TILE_CACHE_DIR') else '/var/lib/mod_tile'}
stats_file={config.RENDERD_RUN_DIR if hasattr(config, 'RENDERD_RUN_DIR') else '/var/run/renderd'}/renderd.stats
font_dir_recurse=1

[mapnik]
plugins_dir={mapnik_plugins_dir}
font_dir=/usr/share/fonts/
font_dir_recurse=1

[default]
URI=/hot/
XML={mapnik_xml_path}
HOST={renderd_host}
TILESIZE=256
# MAXZOOM=20 ; Usually defined in the style XML
"""
    try:
        # Config file should be readable by the renderd user (www-data)
        run_elevated_command(["tee", RENDERD_CONF_PATH], cmd_input=renderd_conf_content, current_logger=logger_to_use)
        run_elevated_command(["chown", f"root:{RENDERD_GROUP}", RENDERD_CONF_PATH],
                             current_logger=logger_to_use)  # root owner, www-data group read
        run_elevated_command(["chmod", "640", RENDERD_CONF_PATH],
                             current_logger=logger_to_use)  # Read for owner and group
        log_map_server(f"{config.SYMBOLS['success']} Created/Updated and secured {RENDERD_CONF_PATH}", "success",
                       logger_to_use)
    except Exception as e:
        log_map_server(f"{config.SYMBOLS['error']} Failed to write or set permissions for {RENDERD_CONF_PATH}: {e}",
                       "error", logger_to_use)
        raise


def activate_renderd_service(current_logger: Optional[logging.Logger] = None) -> None:
    """Reloads systemd, enables and restarts the renderd service."""
    logger_to_use = current_logger if current_logger else module_logger
    log_map_server(f"{config.SYMBOLS['step']} Activating Renderd systemd service...", "info", logger_to_use)

    systemd_reload(current_logger=logger_to_use)
    run_elevated_command(["systemctl", "enable", "renderd.service"], current_logger=logger_to_use)
    run_elevated_command(["systemctl", "restart", "renderd.service"], current_logger=logger_to_use)

    log_map_server(f"{config.SYMBOLS['info']} Renderd service status:", "info", logger_to_use)
    run_elevated_command(["systemctl", "status", "renderd.service", "--no-pager", "-l"], current_logger=logger_to_use)
    log_map_server(f"{config.SYMBOLS['success']} Renderd service activated.", "success", logger_to_use)